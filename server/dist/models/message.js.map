{"version":3,"sources":["../../src/models/message.js"],"names":["Message","app","messages","OrderedMap","channelId","limit","offset","Promise","resolve","reject","ObjectID","query","$lookup","from","localField","foreignField","as","$match","$eq","$project","_id","user","$arrayElemAt","userId","body","created","role","name","online","$limit","$skip","$sort","db","collection","aggregate","err","results","obj","id","_","get","toString","message","Date","insertOne","info","findOneAndUpdate","$set","lastMessage","updated","models","load","then","unset","catch"],"mappings":"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","file":"message.js","sourcesContent":["import _ from 'lodash'\r\nimport {OrderedMap} from 'immutable'\r\nimport {ObjectID} from 'mongodb'\r\n\r\nexport default class Message {\r\n\r\n    constructor(app) {\r\n        this.app = app;\r\n        this.messages = new OrderedMap();\r\n    }\r\n\r\n\r\n    getChannelMessages(channelId, limit = 50, offset = 0){\r\n        return new Promise((resolve, reject) => {\r\n            channelId = new ObjectID(channelId);\r\n            const query = [\r\n                {\r\n                    $lookup: {\r\n                        from: 'users',\r\n                        localField: 'userId',\r\n                        foreignField: '_id',\r\n                        as: 'user'\r\n                    }\r\n                },\r\n                {\r\n                    $match: {\r\n                        'channelId': {$eq: channelId},\r\n                    },\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: true,\r\n                        channelId: true,\r\n                        user: {$arrayElemAt: ['$user', 0]},\r\n                        userId: true,\r\n                        body: true,\r\n                        created: true,\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: true,\r\n                        channelId: true,\r\n                        user: {_id: true,role: true, name: true, created: true, online: true},\r\n                        userId: true,\r\n                        body: true,\r\n                        created: true,\r\n                    }\r\n                },\r\n                {\r\n                    $limit: limit\r\n                },\r\n                {\r\n                    $skip: offset,\r\n                },\r\n                {\r\n                    $sort: {created: -1}\r\n                }\r\n\r\n            ];\r\n            this.app.db.collection('messages').aggregate(query, (err, results) => {\r\n                return err ? reject(err): resolve(results)\r\n\r\n            });\r\n        })\r\n    }\r\n\r\n    create(obj) {\r\n        return new Promise((resolve, reject) => {\r\n            let id = _.get(obj, '_id', null);\r\n            id = _.toString(id);\r\n            const userId = new ObjectID(_.get(obj, 'userId'));\r\n            const channelId = new ObjectID(_.get(obj, 'channelId'));\r\n            const message = {\r\n                _id: new ObjectID(id),\r\n                body: _.get(obj, 'body', ''),\r\n                userId: userId,\r\n                channelId: channelId,\r\n                created: new Date(),\r\n            };\r\n                this.app.db.collection('messages').insertOne(message, (err, info) =>{\r\n                    if(err){\r\n                        return reject(err);\r\n                    }\r\n                // let update lastMessgage field to channel\r\n                this.app.db.collection('channels').findOneAndUpdate({_id: channelId}, {\r\n                    $set: {\r\n                        lastMessage: _.get(message, 'body', ''),\r\n                        updated: new Date(),\r\n                    }\r\n                })\r\n                this.app.models.user.load(_.toString(userId)).then((user) =>{\r\n                    _.unset(user, 'password');\r\n                    _.unset(user, 'email');\r\n                    message.user = user;\r\n                    return resolve(message);\r\n                }).catch((err) => {\r\n                    return reject(err);\r\n                });\r\n            });\r\n        });\r\n    }\r\n}"]}