{"version":3,"sources":["../../src/models/event.js"],"names":["Event","app","events","OrderedMap","userId","offset","Promise","resolve","reject","ObjectID","console","log","query","$match","$eq","$project","_id","title","start","end","info","$skip","db","collection","aggregate","err","results","event","eventId","findOneAndUpdate","$set","res","id","callback","findOne","result","_","toString","findEventById","set","obj","get","insertOne"],"mappings":"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","file":"event.js","sourcesContent":["//1. getAll by user\r\n//2. eventById \r\n//3. create\r\n//4. update\r\n//5. read for passing the event from eventById\r\nimport _ from 'lodash'\r\nimport {ObjectID} from 'mongodb'\r\nimport {OrderedMap} from 'immutable'\r\n\r\nexport default class Event {\r\n    constructor(app) {\r\n        this.app = app;\r\n        this.events = new OrderedMap();\r\n    }\r\n\r\n    getAll(userId, offset = 0) {\r\n        return new Promise((resolve, reject) => {\r\n            userId = new ObjectID(userId);\r\n            console.log(\"userId in getAll : \" + userId)\r\n            \r\n              const query = [\r\n                {\r\n                    $match: {\r\n                        'userId' : {$eq: userId}\r\n                    }\r\n                },\r\n                {\r\n                    $project: {\r\n                        _id: true,\r\n                        userId: true,\r\n                        title: true,\r\n                        start: true,\r\n                        end: true,\r\n                        info : true\r\n                    }\r\n                },\r\n                {\r\n                    $skip: offset\r\n                }\r\n            ];\r\n            this.app.db.collection('events').aggregate(query,(err, results) => {\r\n                return err ? reject(err): resolve(results)\r\n            }); \r\n        })\r\n    }\r\n\r\n    update(event,eventId) {\r\n        console.log(\"inside event update, event : \" + eventId);\r\n        console.log(\"inside update, event :  \" + event.title)\r\n        return new Promise((resolve, reject) => {\r\n        this.app.db.collection('events').findOneAndUpdate({_id:eventId}, \r\n            {$set:{\r\n                title: event.title,\r\n                start: event.start,\r\n                end: event.end,\r\n                info: event.info\r\n            }}\r\n        , (err, res) => {\r\n            if(err) {\r\n                console.log(\"error occured during updating event\");\r\n                return reject(err);\r\n             }\r\n             return resolve(res);\r\n            \r\n        })\r\n    })\r\n        \r\n    }\r\n\r\n    findEventById(id, callback = () => {}) {\r\n        if(!id) {\r\n            console.log(\"id is null\")\r\n        }\r\n        const eventId = new ObjectID(id);\r\n        this.app.db.collection('events').findOne({_id:eventId}, (err, result) => {\r\n            if(err || !result) {\r\n                console.log(\"no event corresponding to \" + eventId)\r\n            }\r\n            return callback(null, result);\r\n        })\r\n    }\r\n\r\n    load(id) {\r\n        //id = `${id}`;\r\n        id = _.toString(id);\r\n        return new Promise((resolve, reject) => {\r\n            this.findEventById(id, (err,event) => {\r\n                if(!err && event) {\r\n                    this.events = this.events.set(id, event);\r\n                }\r\n                return err ? reject(err) : resolve(event)\r\n            })\r\n        })\r\n    }\r\n\r\n    create(obj) {\r\n        return new Promise((resolve,reject) => {\r\n            console.log(\"from event models, obj _id value : \" + obj._id + \" title value : \" + obj.title)\r\n            const userId = new ObjectID(_.get(obj,'userId'));\r\n            console.log(\"userId : \" + userId);\r\n            const event = {\r\n                //_id: new ObjectID(id),\r\n                title: obj.title,\r\n                start: obj.start,\r\n                end: obj.end,\r\n                info : obj.info,\r\n                userId: userId       \r\n            };\r\n            this.app.db.collection('events').insertOne(event,(err) => {\r\n                if(err) {\r\n                    console.log(\"err in db.collection : \" + err)\r\n                    return reject(err);\r\n                }\r\n               return resolve(event);\r\n            })\r\n        })\r\n    }\r\n}\r\n"]}