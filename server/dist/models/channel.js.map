{"version":3,"sources":["../../src/models/channel.js"],"names":["Channel","app","channels","OrderedMap","q","Promise","resolve","reject","db","collection","aggregate","err","results","options","console","log","find","toArray","id","_","toString","channelFromCache","get","findById","then","c","set","catch","findOne","_id","ObjectID","result","obj","idObject","members","each","value","key","memberObjectId","push","userIdObject","userId","channel","title","lastMessage","created","Date","insertOne","info","channelId"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;;;IAEqBA,O;AAEjB,qBAAYC,GAAZ,EAAiB;AAAA;;AACb,aAAKA,GAAL,GAAWA,GAAX;AACA,aAAKC,QAAL,GAAgB,IAAIC,qBAAJ,EAAhB;AACH;;;;kCAGSC,C,EAAE;AAAA;;AACR,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,sBAAKN,GAAL,CAASO,EAAT,CAAYC,UAAZ,CAAuB,UAAvB,EAAmCC,SAAnC,CAA6CN,CAA7C,EAAgD,UAACO,GAAD,EAAMC,OAAN,EAAkB;AAC1D,2BAAOD,MAAMJ,OAAOI,GAAP,CAAN,GAAoBL,QAAQM,OAAR,CAA3B;AACP,iBAFD;AAGH,aAJM,CAAP;AAKH;;;6BAEIR,C,EAAgB;AAAA;;AAAA,gBAAbS,OAAa,uEAAH,EAAG;;AACjBC,oBAAQC,GAAR,CAAYX,CAAZ;AACA,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,uBAAKN,GAAL,CAASO,EAAT,CAAYC,UAAZ,CAAuB,UAAvB,EAAmCO,IAAnC,CAAwCZ,CAAxC,EAA2CS,OAA3C,EAAoDI,OAApD,CAA4D,UAACN,GAAD,EAAMC,OAAN,EAAkB;AAC1E,2BAAOD,MAAMJ,OAAOI,GAAP,CAAN,GAAoBL,QAAQM,OAAR,CAA3B;AACH,iBAFD;AAGH,aAJM,CAAP;AAKH;;;6BACAM,E,EAAI;AAAA;;AACL,mBAAO,IAAIb,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCW,qBAAKC,iBAAEC,QAAF,CAAWF,EAAX,CAAL;AACA;AACA,oBAAMG,mBAAmB,OAAKnB,QAAL,CAAcoB,GAAd,CAAkBJ,EAAlB,CAAzB;AACA,oBAAIG,gBAAJ,EAAsB;AAClB,2BAAOf,QAAQe,gBAAR,CAAP;AACH;AACD;AACA,uBAAKE,QAAL,CAAcL,EAAd,EAAkBM,IAAlB,CAAuB,UAACC,CAAD,EAAO;AAC1B,2BAAKvB,QAAL,GAAgB,OAAKA,QAAL,CAAcwB,GAAd,CAAkBR,EAAlB,EAAsBO,CAAtB,CAAhB;AACA,2BAAOnB,QAAQmB,CAAR,CAAP;AACH,iBAHD,EAGGE,KAHH,CAGS,UAAChB,GAAD,EAAS;AACd,2BAAOJ,OAAOI,GAAP,CAAP;AACH,iBALD;AAMH,aAdM,CAAP;AAeH;;;iCAGQO,E,EAAG;AAAA;;AACR,mBAAO,IAAIb,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,uBAAKN,GAAL,CAASO,EAAT,CAAYC,UAAZ,CAAuB,UAAvB,EAAmCmB,OAAnC,CAA2C,EAACC,KAAK,IAAIC,iBAAJ,CAAaZ,EAAb,CAAN,EAA3C,EAAoE,UAACP,GAAD,EAAMoB,MAAN,EAAiB;AAC7E,wBAAGpB,OAAO,CAACoB,MAAX,EAAkB;AACd,+BAAOxB,OAAOI,MAAMA,GAAN,GAAY,WAAnB,CAAP;AACH;AACD,2BAAOL,QAAQyB,MAAR,CAAP;AACP,iBALD;AAMH,aAPM,CAAP;AAQH;;;+BAEMC,G,EAAK;AAAA;;AACR,mBAAO,IAAI3B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAIW,KAAK,sBAASC,iBAAEG,GAAF,CAAMU,GAAN,EAAW,KAAX,CAAT,CAAT;AACA,oBAAIC,WAAWf,KAAK,IAAIY,iBAAJ,CAAaZ,EAAb,CAAL,GAAwB,IAAIY,iBAAJ,EAAvC;AACA,oBAAII,UAAU,EAAd;AACAf,iCAAEgB,IAAF,CAAOhB,iBAAEG,GAAF,CAAMU,GAAN,EAAW,SAAX,EAAsB,EAAtB,CAAP,EAAkC,UAACI,KAAD,EAAQC,GAAR,EAAgB;AAC9C,wBAAMC,iBAAiB,IAAIR,iBAAJ,CAAaO,GAAb,CAAvB;AACAH,4BAAQK,IAAR,CAAaD,cAAb;AACH,iBAHD;AAII,oBAAIE,eAAe,IAAnB;AACA,oBAAIC,SAAStB,iBAAEG,GAAF,CAAMU,GAAN,EAAW,QAAX,EAAqB,IAArB,CAAb;AACA,oBAAIS,MAAJ,EAAY;AACRD,mCAAe,IAAIV,iBAAJ,CAAaW,MAAb,CAAf;AACH;AACD,oBAAMC,UAAU;AACZb,yBAAKI,QADO;AAEZU,2BAAOxB,iBAAEG,GAAF,CAAMU,GAAN,EAAW,OAAX,EAAoB,EAApB,CAFK;AAGZY,iCAAazB,iBAAEG,GAAF,CAAMU,GAAN,EAAW,aAAX,EAA0B,EAA1B,CAHD;AAIZa,6BAAS,IAAIC,IAAJ,EAJG;AAKZL,4BAAQD,YALI;AAMZN,6BAASA;AANG,iBAAhB;AAQE,uBAAKjC,GAAL,CAASO,EAAT,CAAYC,UAAZ,CAAuB,UAAvB,EAAmCsC,SAAnC,CAA6CL,OAA7C,EAAsD,UAAC/B,GAAD,EAAMqC,IAAN,EAAe;AACnE,wBAAI,CAACrC,GAAL,EAAU;AACN,4BAAMsC,YAAYP,QAAQb,GAAR,CAAYT,QAAZ,EAAlB;AACA,+BAAKlB,QAAL,GAAgB,OAAKA,QAAL,CAAcwB,GAAd,CAAkBuB,SAAlB,EAA6BP,OAA7B,CAAhB;AACH;AACD,2BAAO/B,MAAMJ,OAAOI,GAAP,CAAN,GAAoBL,QAAQoC,OAAR,CAA3B;AACH,iBANC;AAOL,aA5BE,CAAP;AA6BC;;;;;;kBApFgB1C,O","file":"channel.js","sourcesContent":["import _ from 'lodash'\r\nimport {toString} from '../helper'\r\nimport {ObjectID} from 'mongodb'\r\nimport {OrderedMap} from 'immutable'\r\n\r\nexport default class Channel {\r\n\r\n    constructor(app) {\r\n        this.app = app;\r\n        this.channels = new OrderedMap();\r\n    }\r\n\r\n\r\n    aggregate(q){\r\n        return new Promise((resolve, reject) => {\r\n            this.app.db.collection('channels').aggregate(q, (err, results) => {\r\n                    return err ? reject(err) : resolve(results);\r\n            });\r\n        })\r\n    }\r\n\r\n    find(q, options = {}){\r\n        console.log(q);\r\n        return new Promise((resolve, reject) => {\r\n            this.app.db.collection('channels').find(q, options).toArray((err, results) => {\r\n                return err ? reject(err) : resolve(results);\r\n            });\r\n        });\r\n    }\r\nload(id) {\r\n    return new Promise((resolve, reject) => {\r\n        id = _.toString(id);\r\n        // first find in cache\r\n        const channelFromCache = this.channels.get(id);\r\n        if (channelFromCache) {\r\n            return resolve(channelFromCache);\r\n        }\r\n        // let find in db\r\n        this.findById(id).then((c) => {\r\n            this.channels = this.channels.set(id, c);\r\n            return resolve(c);\r\n        }).catch((err) => {\r\n            return reject(err);\r\n        })\r\n    })\r\n}\r\n\r\n\r\nfindById(id){\r\n    return new Promise((resolve, reject) => {\r\n        this.app.db.collection('channels').findOne({_id: new ObjectID(id)}, (err, result) => {\r\n                if(err || !result){\r\n                    return reject(err ? err : \"Not found\");\r\n                }\r\n                return resolve(result);\r\n        });\r\n    })\r\n}\r\n\r\ncreate(obj) {  \r\n    return new Promise((resolve, reject) => {\r\n        let id = toString(_.get(obj, '_id'));\r\n        let idObject = id ? new ObjectID(id) : new ObjectID();\r\n        let members = [];\r\n        _.each(_.get(obj, 'members', []), (value, key) => {\r\n            const memberObjectId = new ObjectID(key);\r\n            members.push(memberObjectId);\r\n        });\r\n            let userIdObject = null;\r\n            let userId = _.get(obj, 'userId', null);\r\n            if (userId) {\r\n                userIdObject = new ObjectID(userId);\r\n            }\r\n            const channel = {\r\n                _id: idObject,\r\n                title: _.get(obj, 'title', ''),\r\n                lastMessage: _.get(obj, 'lastMessage', ''),\r\n                created: new Date(),\r\n                userId: userIdObject,\r\n                members: members,\r\n            }\r\n              this.app.db.collection('channels').insertOne(channel, (err, info) => {\r\n                if (!err) {\r\n                    const channelId = channel._id.toString();\r\n                    this.channels = this.channels.set(channelId, channel);\r\n                }\r\n                return err ? reject(err) : resolve(channel);\r\n            });\r\n        });\r\n    }\r\n}"]}