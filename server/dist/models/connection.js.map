{"version":3,"sources":["../../src/models/connection.js"],"names":["Connection","app","connections","modelDidLoad","msg","messageObject","JSON","parse","err","console","log","userId","obj","query","$match","members","$all","ObjectID","$lookup","from","localField","foreignField","as","$unwind","path","$eq","$group","_id","users","db","collection","aggregate","results","_","each","result","uid","toString","get","push","memberConnections","filter","con","includes","size","forEach","connection","key","ws","send","message","stringify","socketId","action","payload","userConnection","isAuthenticated","models","create","then","channelId","channel","load","memberIds","memberId","c","catch","channelObject","$in","queryOptions","name","created","user","find","id","memberConnection","chanelObject","userTokenId","token","loadTokenAndUser","set","userIdString","sendToMembers","updateUserStatus","wss","on","clientConnection","decodeMesasge","doTheJob","closeConnection","remove","userConnections"],"mappings":";;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;IAEqBA,U;AAEjB,wBAAYC,GAAZ,EAAgB;AAAA;;AAEZ,aAAKA,GAAL,GAAWA,GAAX;;AAEA,aAAKC,WAAL,GAAmB,4BAAnB;;AAEA,aAAKC,YAAL;AACH;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;;sCAEcC,G,EAAK;;AAGf,gBAAIC,gBAAgB,IAApB;;AAGA,gBAAI;;AAEAA,gCAAgBC,KAAKC,KAAL,CAAWH,GAAX,CAAhB;AACH,aAHD,CAIA,OAAOI,GAAP,EAAY;;AAERC,wBAAQC,GAAR,CAAY,mCAAZ,EAAiDN,GAAjD;AACH;;AAGD,mBAAOC,aAAP;AAEH;;;sCAEaM,M,EAAQC,G,EAAK;AAAA;;AAEvB,gBAAMC,QAAQ,CACV;AACIC,wBAAQ;;AAEJC,6BAAS,EAACC,MAAM,CAAC,IAAIC,iBAAJ,CAAaN,MAAb,CAAD,CAAP;AAFL;AADZ,aADU,EAOV;;AAEIO,yBAAS;;AAELC,0BAAM,OAFD;AAGLC,gCAAY,SAHP;AAILC,kCAAc,KAJT;AAKLC,wBAAI;AALC;AAFb,aAPU,EAiBV;AACIC,yBAAS;;AAELC,0BAAM;AAFD;AADb,aAjBU,EAuBV;AACIV,wBAAQ,EAAC,gBAAgB,EAACW,KAAK,IAAN,EAAjB;AADZ,aAvBU,EA0BV;AACIC,wBAAQ;;AAEJC,yBAAI;AAFA;AADZ,aA1BU,CAAd;;AAoCA,gBAAMC,QAAQ,EAAd;;AAEA,iBAAK3B,GAAL,CAAS4B,EAAT,CAAYC,UAAZ,CAAuB,UAAvB,EAAmCC,SAAnC,CAA6ClB,KAA7C,EAAoD,UAACL,GAAD,EAAMwB,OAAN,EAAkB;;AAElEvB,wBAAQC,GAAR,CAAY,wDAAZ,EAAsEsB,OAAtE;AACA,oBAAIxB,QAAQ,IAAR,IAAgBwB,OAApB,EAA6B;;AAEzBC,qCAAEC,IAAF,CAAOF,OAAP,EAAgB,UAACG,MAAD,EAAY;;AAGxB,4BAAMC,MAAMH,iBAAEI,QAAF,CAAWJ,iBAAEK,GAAF,CAAMH,MAAN,EAAc,KAAd,CAAX,CAAZ;AACA,4BAAIC,GAAJ,EAAS;AACLR,kCAAMW,IAAN,CAAWH,GAAX;AACH;AACJ,qBAPD;;AASA;AACA,wBAAMI,oBAAoB,MAAKtC,WAAL,CAAiBuC,MAAjB,CAAwB,UAACC,GAAD;AAAA,+BAAST,iBAAEU,QAAF,CAAWf,KAAX,EAAkBK,iBAAEI,QAAF,CAAWJ,iBAAEK,GAAF,CAAMI,GAAN,EAAW,QAAX,CAAX,CAAlB,CAAT;AAAA,qBAAxB,CAA1B;AACA,wBAAIF,kBAAkBI,IAAtB,EAA4B;;AAExBJ,0CAAkBK,OAAlB,CAA0B,UAACC,UAAD,EAAaC,GAAb,EAAqB;;AAE3C,gCAAMC,KAAKF,WAAWE,EAAtB;AACA,kCAAKC,IAAL,CAAUD,EAAV,EAAcpC,GAAd;AACH,yBAJD;AAKH;AAGJ;AACJ,aA3BD;AA4BH;;;gCACOA,G,EAAK;AAAA;;AAGT;;AAEA,iBAAKV,WAAL,CAAiB2C,OAAjB,CAAyB,UAACH,GAAD,EAAMK,GAAN,EAAc;AACnC,oBAAMC,KAAKN,IAAIM,EAAf;;AAEA,uBAAKC,IAAL,CAAUD,EAAV,EAAcpC,GAAd;AACH,aAJD;AAKH;;;6BAEIoC,E,EAAIpC,G,EAAK;;AAEV,gBAAMsC,UAAU5C,KAAK6C,SAAL,CAAevC,GAAf,CAAhB;;AAEAoC,eAAGC,IAAH,CAAQC,OAAR;AACH;;;iCAEQE,Q,EAAUhD,G,EAAK;AAAA;;AACpB,gBAAMiD,SAASpB,iBAAEK,GAAF,CAAMlC,GAAN,EAAW,QAAX,CAAf;AACA,gBAAMkD,UAAUrB,iBAAEK,GAAF,CAAMlC,GAAN,EAAW,SAAX,CAAhB;AACA,gBAAMmD,iBAAiB,KAAKrD,WAAL,CAAiBoC,GAAjB,CAAqBc,QAArB,CAAvB;;AAEA,oBAAOC,MAAP;;AAEI,qBAAK,gBAAL;AACI,wBAAIE,eAAeC,eAAnB,EAAoC;AAChC,4BAAInD,gBAAgBiD,OAApB;;AAEAjD,sCAAcM,MAAd,GAAuBsB,iBAAEK,GAAF,CAAMiB,cAAN,EAAsB,QAAtB,CAAvB;;AAEA;;AAEA,6BAAKtD,GAAL,CAASwD,MAAT,CAAgBP,OAAhB,CAAwBQ,MAAxB,CAA+BrD,aAA/B,EAA8CsD,IAA9C,CAAmD,UAACT,OAAD,EAAY;;AAE5DzC,oCAAQC,GAAR,CAAY,iBAAZ,EAA+BwC,OAA/B;;AAEA,gCAAMU,YAAY3B,iBAAEI,QAAF,CAAWJ,iBAAEK,GAAF,CAAMY,OAAN,EAAe,WAAf,CAAX,CAAlB;;AAEA,mCAAKjD,GAAL,CAASwD,MAAT,CAAgBI,OAAhB,CAAwBC,IAAxB,CAA6BF,SAA7B,EAAwCD,IAAxC,CAA6C,UAACE,OAAD,EAAa;;AAExDpD,wCAAQC,GAAR,CAAY,oCAAZ,EAAkDmD,OAAlD;;AAEA,oCAAME,YAAY9B,iBAAEK,GAAF,CAAMuB,OAAN,EAAe,SAAf,EAA0B,EAA1B,CAAlB;;AAGA5B,iDAAEC,IAAF,CAAO6B,SAAP,EAAkB,UAACC,QAAD,EAAc;;AAE7BA,+CAAW/B,iBAAEI,QAAF,CAAW2B,QAAX,CAAX;;AAEA,wCAAMxB,oBAAoB,OAAKtC,WAAL,CAAiBuC,MAAjB,CAAwB,UAACwB,CAAD;AAAA,+CAAOhC,iBAAEI,QAAF,CAAW4B,EAAEtD,MAAb,MAAyBqD,QAAhC;AAAA,qCAAxB,CAA1B;;AAGAxB,sDAAkBK,OAAlB,CAA0B,UAACC,UAAD,EAAgB;;AAGtC,4CAAME,KAAKF,WAAWE,EAAtB;;AAEA,+CAAKC,IAAL,CAAUD,EAAV,EAAc;;AAEVK,oDAAQ,eAFE;AAGVC,qDAASJ;AAHC,yCAAd;AAOH,qCAZD;AAcJ,iCArBC;AAsBD,6BA7BD;;AA+BC;;AAGH,yBAxCD,EAwCGgB,KAxCH,CAwCS,eAAM;AACX;AACA,gCAAMlB,KAAKO,eAAeP,EAA1B;AACA,mCAAKC,IAAL,CAAUD,EAAV,EAAc;AACVK,wCAAQ,sBADE;AAEVC,yCAASA;AAFC,6BAAd;AAIH,yBA/CD;AAgDH;;AAED;AACJ,qBAAK,gBAAL;AACI,wBAAIO,UAAUP,OAAd;;AAGA,wBAAM3C,SAAS4C,eAAe5C,MAA9B;AACAkD,4BAAQlD,MAAR,GAAiBA,MAAjB;;AAEA,yBAAKV,GAAL,CAASwD,MAAT,CAAgBI,OAAhB,CAAwBH,MAAxB,CAA+BG,OAA/B,EAAwCF,IAAxC,CAA6C,UAACQ,aAAD,EAAmB;;AAE5D;;AAEA;;AAEA;AACA,4BAAI3B,oBAAoB,EAAxB;;AAEA,4BAAMuB,YAAY9B,iBAAEK,GAAF,CAAM6B,aAAN,EAAqB,SAArB,EAAgC,EAAhC,CAAlB;;AAEA;;;AAGA,4BAAMtD,QAAQ;AACVc,iCAAK,EAACyC,KAAKL,SAAN;AADK,yBAAd;;AAIA,4BAAMM,eAAe;AACjB1C,iCAAK,CADY;AAEjB2C,kCAAM,CAFW;AAGjBC,qCAAS;AAHQ,yBAArB;;AAMA,+BAAKtE,GAAL,CAASwD,MAAT,CAAgBe,IAAhB,CAAqBC,IAArB,CAA0B5D,KAA1B,EAAiCwD,YAAjC,EAA+CV,IAA/C,CAAoD,UAAC/B,KAAD,EAAW;AAC3DuC,0CAAcvC,KAAd,GAAsBA,KAAtB;;AAGAK,6CAAEC,IAAF,CAAO6B,SAAP,EAAkB,UAACW,EAAD,EAAQ;;AAEtB,oCAAM/D,SAAS+D,GAAGrC,QAAH,EAAf;AACA,oCAAMsC,mBAAmB,OAAKzE,WAAL,CAAiBuC,MAAjB,CAAwB,UAACC,GAAD;AAAA,2CAAS,KAAGA,IAAI/B,MAAP,KAAoBA,MAA7B;AAAA,iCAAxB,CAAzB;;AAEA,oCAAIgE,iBAAiB/B,IAArB,EAA2B;AACvB+B,qDAAiB9B,OAAjB,CAAyB,UAACH,GAAD,EAAS;;AAE9B,4CAAMM,KAAKN,IAAIM,EAAf;AACA,4CAAMpC,MAAM;AACRyC,oDAAQ,eADA;AAERC,qDAASsB;;AAGb;AALY,yCAAZ,CAMA,OAAK3B,IAAL,CAAUD,EAAV,EAAcpC,GAAd;AAEH,qCAXD;AAaH;AAEA,6BArBL;AAsBH,yBA1BD;;AA8BA;AAEH,qBAxDD;AAyDAH,4BAAQC,GAAR,CAAY,gDAAZ,EAA8DmD,OAA9D;;AAEJ;AACA,qBAAK,MAAL;;AAEI,wBAAMgB,cAAcvB,OAApB;AACA,wBAAIR,aAAa,KAAK5C,WAAL,CAAiBoC,GAAjB,CAAqBc,QAArB,CAAjB;;AAEA,wBAAGN,UAAH,EAAc;;AAEV;AACA,6BAAK7C,GAAL,CAASwD,MAAT,CAAgBqB,KAAhB,CAAsBC,gBAAtB,CAAuCF,WAAvC,EAAoDlB,IAApD,CAAyD,UAACmB,KAAD,EAAW;;AAEhE,gCAAMnE,SAASmE,MAAMnE,MAArB;;AAEAmC,uCAAWU,eAAX,GAA6B,IAA7B;AACAV,uCAAWnC,MAAX,QAAuBA,MAAvB;;AAEA,mCAAKT,WAAL,GAAmB,OAAKA,WAAL,CAAiB8E,GAAjB,CAAqB5B,QAArB,EAA+BN,UAA/B,CAAnB;;AAEA;AACA,gCAAMlC,MAAM;AACRyC,wCAAQ,cADA;AAERC,yCAAS;AAFD,6BAAZ;AAIA,mCAAKL,IAAL,CAAUH,WAAWE,EAArB,EAAyBpC,GAAzB;;AAEA;;AAEA,gCAAMqE,eAAehD,iBAAEI,QAAF,CAAW1B,MAAX,CAArB;AACA,mCAAKuE,aAAL,CAAmBD,YAAnB,EAAiC;AAC7B5B,wCAAQ,aADqB;AAE7BC,yCAAS2B;AAFoB,6BAAjC;;AAKA,mCAAKhF,GAAL,CAASwD,MAAT,CAAgBe,IAAhB,CAAqBW,gBAArB,CAAsCF,YAAtC,EAAoD,IAApD;AAEH,yBA1BD,EA0BGf,KA1BH,CA0BS,UAAC1D,GAAD,EAAQ;;AAET;AACA,gCAAMI,MAAM;AACRyC,wCAAQ,YADA;AAERC,yCAAS,2CAA2CuB;AAF5C,6BAAZ;;AAKA,mCAAK5B,IAAL,CAAUH,WAAWE,EAArB,EAAyBpC,GAAzB;AAEH,yBApCL;AAyCH;;AAEDH,4BAAQC,GAAR,CAAY,yBAAZ,EAAuCmE,WAAvC,SAA2DA,WAA3D,yCAA2DA,WAA3D;;AAEA;;AAEJ;;AAEA;AAzLJ;AA8LH;;;uCAKa;AAAA;;AAGV,iBAAK5E,GAAL,CAASmF,GAAT,CAAaC,EAAb,CAAgB,YAAhB,EAA8B,UAACrC,EAAD,EAAQ;;AAElC,oBAAMI,WAAW,IAAInC,iBAAJ,GAAeoB,QAAf,EAAjB;;AAEA;;;AAIA,oBAAMiD,mBAAmB;AACrB3D,8BAAQyB,QADa;AAErBJ,wBAAIA,EAFiB;AAGrBrC,4BAAQ,IAHa;AAIrB6C,qCAAiB;;AAGrB;AAPyB,iBAAzB,CAQA,OAAKtD,WAAL,GAAmB,OAAKA,WAAL,CAAiB8E,GAAjB,CAAqB5B,QAArB,EAA+BkC,gBAA/B,CAAnB;;AAEI;;AAEAtC,mBAAGqC,EAAH,CAAM,SAAN,EAAiB,UAACjF,GAAD,EAAS;;AAEtB;;AAEA,wBAAM8C,UAAU,OAAKqC,aAAL,CAAmBnF,GAAnB,CAAhB;AACA,2BAAKoF,QAAL,CAAcpC,QAAd,EAAwBF,OAAxB;;AAEAzC,4BAAQC,GAAR,CAAY,+BAAZ,EAA6CN,GAA7C;AAEC,iBATL;;AAWJ4C,mBAAGqC,EAAH,CAAM,OAAN,EAAe,YAAM;AACjB;AACA,wBAAMI,kBAAkB,OAAKvF,WAAL,CAAiBoC,GAAjB,CAAqBc,QAArB,CAAxB;AACA,wBAAMzC,SAASsB,iBAAEI,QAAF,CAAWJ,iBAAEK,GAAF,CAAMmD,eAAN,EAAuB,QAAvB,EAAiC,IAAjC,CAAX,CAAf;;AAGC;AACA,2BAAKvF,WAAL,GAAmB,OAAKA,WAAL,CAAiBwF,MAAjB,CAAwBtC,QAAxB,CAAnB;;AAEA,wBAAIzC,MAAJ,EAAY;AACT;;AAEA,4BAAMgF,kBAAkB,OAAKzF,WAAL,CAAiBuC,MAAjB,CAAwB,UAACC,GAAD;AAAA,mCAAST,iBAAEI,QAAF,CAAWJ,iBAAEK,GAAF,CAAMI,GAAN,EAAW,QAAX,CAAX,MAAqC/B,MAA9C;AAAA,yBAAxB,CAAxB;;AAEA,4BAAIgF,gBAAgB/C,IAAhB,KAAyB,CAA7B,EAAgC;;AAE5B;AACA,mCAAKsC,aAAL,CAAmBvE,MAAnB,EAA2B;AACvB0C,wCAAQ,cADe;AAEvBC,yCAAS3C;AAFc,6BAA3B;;AAKA;;AAEA,mCAAKV,GAAL,CAASwD,MAAT,CAAgBe,IAAhB,CAAqBW,gBAArB,CAAsCxE,MAAtC,EAA8C,KAA9C;AACH;AAIJ;AAEJ,iBA/BD;AAgCH,aA/DD;AAgEH;;;;;;kBA1YgBX,U","file":"connection.js","sourcesContent":["import {OrderedMap} from 'immutable'\r\nimport {ObjectID} from 'mongodb'\r\nimport _ from 'lodash'\r\n\r\nexport default class Connection {\r\n\r\n    constructor(app){\r\n\r\n        this.app = app;\r\n\r\n        this.connections = OrderedMap();\r\n\r\n        this.modelDidLoad();\r\n    }\r\n\r\n    // find(query = {}, options = {}) {\r\n    //     return new Promise((resolve, reject) =>{\r\n    //         this.app.db.collection('user').find(query, options).toArray((err, users) => {\r\n    //             return err ? reject(err) : resolve(users);\r\n    //         })\r\n    //     })\r\n    // }\r\n\r\n    decodeMesasge(msg) {\r\n\r\n\r\n        let messageObject = null;\r\n\r\n\r\n        try {\r\n\r\n            messageObject = JSON.parse(msg);\r\n        }\r\n        catch (err) {\r\n\r\n            console.log(\"An error decode the socket mesage\", msg);\r\n        }\r\n\r\n\r\n        return messageObject;\r\n\r\n    }\r\n\r\n    sendToMembers(userId, obj) {\r\n\r\n        const query = [\r\n            {\r\n                $match: {\r\n\r\n                    members: {$all: [new ObjectID(userId)]}\r\n                }\r\n            },\r\n            {\r\n\r\n                $lookup: {\r\n\r\n                    from: 'users',\r\n                    localField: 'members',\r\n                    foreignField: '_id',\r\n                    as: 'users'\r\n                }\r\n            },\r\n            {\r\n                $unwind: {\r\n\r\n                    path: '$users'\r\n                }\r\n            },\r\n            {\r\n                $match: {'users.online': {$eq: true}}\r\n            },\r\n            {\r\n                $group: {\r\n\r\n                    _id:\"$users._id\"\r\n                }\r\n            }\r\n\r\n\r\n        ];\r\n\r\n        const users = [];\r\n\r\n        this.app.db.collection('channels').aggregate(query, (err, results) => {\r\n\r\n            console.log(\"found members array who is chattting with current user\", results);\r\n            if (err === null && results) {\r\n\r\n                _.each(results, (result) => {\r\n\r\n\r\n                    const uid = _.toString(_.get(result, '_id'));\r\n                    if (uid) {\r\n                        users.push(uid);\r\n                    }\r\n                });\r\n\r\n                // this is list of all connections is chatting with current user\r\n                const memberConnections = this.connections.filter((con) => _.includes(users, _.toString(_.get(con, 'userId'))));\r\n                if (memberConnections.size) {\r\n\r\n                    memberConnections.forEach((connection, key) => {\r\n\r\n                        const ws = connection.ws;\r\n                        this.send(ws, obj);\r\n                    });\r\n                }\r\n\r\n\r\n            }\r\n        })\r\n    }\r\n    sendAll(obj) {\r\n\r\n\r\n        // send socket messages to all clients.\r\n\r\n        this.connections.forEach((con, key) => {\r\n            const ws = con.ws;\r\n\r\n            this.send(ws, obj);\r\n        });\r\n    }\r\n\r\n    send(ws, obj) {\r\n\r\n        const message = JSON.stringify(obj);\r\n\r\n        ws.send(message);\r\n    }\r\n\r\n    doTheJob(socketId, msg) {\r\n        const action = _.get(msg, 'action');\r\n        const payload = _.get(msg, 'payload');\r\n        const userConnection = this.connections.get(socketId);\r\n\r\n        switch(action){\r\n\r\n            case 'create_message':\r\n                if (userConnection.isAuthenticated) {\r\n                    let messageObject = payload;\r\n\r\n                    messageObject.userId = _.get(userConnection, 'userId');\r\n\r\n                    //console.log(\"Got message from client about creating new message\", payload);\r\n                    \r\n                    this.app.models.message.create(messageObject).then((message) =>{\r\n                          \r\n                       console.log(\"Message created\", message);\r\n\r\n                       const channelId = _.toString(_.get(message, 'channelId'));\r\n\r\n                       this.app.models.channel.load(channelId).then((channel) => {\r\n\r\n                         console.log(\"got channel of the message created\", channel);\r\n\r\n                         const memberIds = _.get(channel, 'members', []);\r\n\r\n\r\n                         _.each(memberIds, (memberId) => {\r\n\r\n                            memberId = _.toString(memberId);\r\n\r\n                            const memberConnections = this.connections.filter((c) => _.toString(c.userId) === memberId);\r\n\r\n\r\n                            memberConnections.forEach((connection) => {\r\n\r\n\r\n                                const ws = connection.ws;\r\n\r\n                                this.send(ws, {\r\n\r\n                                    action: 'message_added',\r\n                                    payload: message,\r\n                                })\r\n\r\n\r\n                            })\r\n\r\n                       });\r\n                       }) \r\n\r\n                        // message created successful.\r\n\r\n\r\n                    }).catch(err =>{\r\n                        // send back to the socket client who sent this messagse with error\r\n                        const ws = userConnection.ws;\r\n                        this.send(ws, {\r\n                            action: 'create_message_error',\r\n                            payload: payload,\r\n                        })\r\n                    })\r\n                }\r\n\r\n                break;\r\n            case 'create_channel':\r\n                let channel = payload;\r\n\r\n\r\n                const userId = userConnection.userId;\r\n                channel.userId = userId;\r\n\r\n                this.app.models.channel.create(channel).then((channelObject) => {\r\n\r\n                    // successful created channel ,\r\n\r\n                    //console.log(\"Succesful created new channel\", typeof userId, chanelObject);\r\n\r\n                    // let send back to all members in this channel  with new channel  created\r\n                    let memberConnections = [];\r\n\r\n                    const memberIds = _.get(channelObject, 'members', []);\r\n\r\n                    // fetch all users has memberId\r\n\r\n\r\n                    const query = {\r\n                        _id: {$in: memberIds}\r\n                    };\r\n\r\n                    const queryOptions = {\r\n                        _id: 1,\r\n                        name: 1,\r\n                        created: 1,\r\n                    }\r\n\r\n                    this.app.models.user.find(query, queryOptions).then((users) => {\r\n                        channelObject.users = users;\r\n\r\n\r\n                        _.each(memberIds, (id) => {\r\n\r\n                            const userId = id.toString();\r\n                            const memberConnection = this.connections.filter((con) => `${con.userId}` === userId);\r\n   \r\n                            if (memberConnection.size) {\r\n                                memberConnection.forEach((con) => {\r\n\r\n                                    const ws = con.ws;\r\n                                    const obj = {\r\n                                        action: 'channel_added',\r\n                                        payload: chanelObject,\r\n                                    }\r\n\r\n                                    //send to socket client matching userId in channel members\r\n                                    this.send(ws, obj);\r\n\r\n                                })\r\n                              \r\n                            }\r\n\r\n                            });\r\n                    });\r\n\r\n              \r\n\r\n                    //const memberConnections = this.connections.filter((con) => `${con.userId}` = )\r\n\r\n                });\r\n                console.log(\"Got new channel need to be created from client\", channel);\r\n\r\n            break;\r\n            case 'auth':\r\n\r\n                const userTokenId = payload;\r\n                let connection = this.connections.get(socketId);\r\n\r\n                if(connection){\r\n\r\n                    // let find user with this token and verify it.\r\n                    this.app.models.token.loadTokenAndUser(userTokenId).then((token) => {\r\n                       \r\n                        const userId = token.userId;\r\n\r\n                        connection.isAuthenticated = true;\r\n                        connection.userId = `${userId}`;\r\n\r\n                        this.connections = this.connections.set(socketId, connection);\r\n\r\n                        // now send back to the client you are verified.\r\n                        const obj = {\r\n                            action: 'auth_success',\r\n                            payload: 'You are verified',\r\n                        }\r\n                        this.send(connection.ws, obj);\r\n\r\n                        //send to all socket clients connection\r\n\r\n                        const userIdString = _.toString(userId);\r\n                        this.sendToMembers(userIdString, {\r\n                            action: 'user_online',\r\n                            payload: userIdString,\r\n                        });\r\n\r\n                        this.app.models.user.updateUserStatus(userIdString, true);\r\n\r\n                    }).catch((err)=> {\r\n\r\n                            // send back to socket client you are not logged.\r\n                            const obj = {\r\n                                action: 'auth_error',\r\n                                payload: \"An error authentication your account: \" + userTokenId\r\n                            };\r\n    \r\n                            this.send(connection.ws, obj);\r\n    \r\n                        })\r\n\r\n\r\n             \r\n                   \r\n                }\r\n                \r\n                console.log(\"User with token Id is: \", userTokenId, typeof userTokenId);\r\n                \r\n                break;\r\n\r\n            default:\r\n\r\n            break;\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    modelDidLoad(){\r\n\r\n\r\n        this.app.wss.on(\"connection\", (ws) => {\r\n\r\n            const socketId = new ObjectID().toString();\r\n\r\n            //console.log(\"Someone connected to the server via socket\", socketId);\r\n\r\n\r\n\r\n            const clientConnection = {\r\n                _id: `${socketId}`,\r\n                ws: ws,\r\n                userId: null,\r\n                isAuthenticated: false,\r\n            }\r\n\r\n            // save this connection client to cache.\r\n            this.connections = this.connections.set(socketId, clientConnection);\r\n\r\n                // listen any message from websocket client.\r\n\r\n                ws.on('message', (msg) => {\r\n\r\n                    //console.log(\"SERVER: message from a client\", msg);\r\n                    \r\n                    const message = this.decodeMesasge(msg);\r\n                    this.doTheJob(socketId, message);\r\n\r\n                    console.log(\"SERVER: message from a client\", msg);\r\n\r\n                    });\r\n\r\n            ws.on(\"close\", () => {\r\n                //console.log(\"Someone disconnected to the server\", socketId);\r\n                const closeConnection = this.connections.get(socketId);\r\n                const userId = _.toString(_.get(closeConnection, 'userId', null));\r\n\r\n\r\n                 // let remove this socket client from the cache collection.\r\n                 this.connections = this.connections.remove(socketId);\r\n\r\n                 if (userId) {\r\n                    // now find all socket clients matching with userId\r\n\r\n                    const userConnections = this.connections.filter((con) => _.toString(_.get(con, 'userId')) === userId);\r\n                    \r\n                    if (userConnections.size === 0) {\r\n\r\n                        // this mean no more socket clients is online with this userId. now user is offline.\r\n                        this.sendToMembers(userId, {\r\n                            action: 'user_offline',\r\n                            payload: userId\r\n                        });\r\n\r\n                        // update user status into database\r\n\r\n                        this.app.models.user.updateUserStatus(userId, false);\r\n                    }\r\n                \r\n                \r\n                \r\n                }\r\n\r\n            });\r\n        });\r\n    }\r\n}"]}