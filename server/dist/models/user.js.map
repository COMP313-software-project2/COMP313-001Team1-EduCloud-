{"version":3,"sources":["../../src/models/user.js"],"names":["saltRound","User","app","users","OrderedMap","userId","isOnline","Promise","resolve","reject","update","user","online","query","_id","ObjectID","updater","$set","db","collection","err","info","options","find","toArray","q","regex","RegExp","$or","name","$regex","email","created","results","length","message","role","_","get","password","findUserByEmail","result","hashPassword","isMatch","bcrypt","compareSync","models","token","create","then","catch","callback","findOne","reqId","code","console","log","nexmo","Nexmo","apiKey","apiSecret","verify","check","request_id","error","number","request","brand","id","userInCache","findUserById","set","errors","fields","validations","errorMessage","do","forEach","field","fieldValidation","isValid","msg","push","join","toLower","trim","hashSync","userFormatted","Date","beforeSave","insertOne","toString"],"mappings":"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","file":"user.js","sourcesContent":["import _ from 'lodash'\r\nimport {isEmail} from '../helper'\r\nimport bcrypt from 'bcrypt'\r\nimport {ObjectID} from 'mongodb'\r\nimport {OrderedMap} from 'immutable'\r\n//const Nexmo = require('nexmo');\r\nimport Nexmo from 'nexmo'\r\n\r\n\r\nconst saltRound = 10;\r\n\r\n\r\nexport default class User{\r\n\r\n    constructor(app){\r\n        this.app = app;\r\n        this.users = new OrderedMap();\r\n    }\r\n    \r\n\r\n    updateUserStatus(userId, isOnline = false) {\r\n        return new Promise((resolve, reject) => {\r\n            // first update status of cache this.users\r\n            this.users = this.users.update(userId, (user) => {\r\n                if (user) {\r\n                    user.online = isOnline;\r\n                }\r\n                return user;\r\n            });\r\n            const query = {_id: new ObjectID(userId)};\r\n            const updater = {$set: {online: isOnline}};\r\n            this.app.db.collection('users').update(query, updater, (err, info) => {\r\n                return err ? reject(err) : resolve(info);\r\n            });\r\n        })\r\n    }\r\n\r\n    find(query = {}, options = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            this.app.db.collection('users').find(query, options).toArray((err, users) => {\r\n                return err ? reject(err) : resolve(users);\r\n            })\r\n        });\r\n    }\r\n\r\n    search(q=\"\"){\r\n        return new Promise((resolve, reject) => {\r\n            const regex = new RegExp(q, 'i');\r\n            const query = {\r\n                $or: [\r\n                    {name: {$regex: regex}},\r\n                    {email: {$regex: regex}},\r\n                ],\r\n            };\r\n            this.app.db.collection('users').find(query, {\r\n                _id: true,\r\n                name: true,\r\n                created: true,\r\n            }).toArray((err, results) => {\r\n\r\n                if (err || !results || !results.length) {\r\n                    return reject({message: \"User not found.\"})\r\n                }\r\n                return resolve(results);\r\n            });\r\n        });\r\n    }\r\n\r\n    login(user) {\r\n        const role = _.get(user, 'role', '');\r\n        const email = _.get(user, 'email', '');\r\n        const password = _.get(user, 'password', '');\r\n        return new Promise((resolve, reject) => {\r\n            if (!password || !email || !isEmail(email)) {\r\n                return reject({message: \"An error login.\"})\r\n            }\r\n            // find in database with email\r\n            this.findUserByEmail(email, (err, result) => {\r\n                if (err) {\r\n                    return reject({message: \"Login Error.\"});\r\n                }\r\n                // if found user we have to compare the password hash and plain text.\r\n                const hashPassword = _.get(result, 'password');\r\n                const isMatch = bcrypt.compareSync(password, hashPassword);\r\n                if (!isMatch) {\r\n                    return reject({message: \"Login Error.\"});\r\n                }\r\n                // user login successful let creat new token save to token collection.\r\n                const userId = result._id;\r\n                this.app.models.token.create(userId).then((token) => {\r\n                    token.user = result;\r\n                    return resolve(token);\r\n\r\n                }).catch(err => {\r\n                    return reject({message: \"Login error\"});\r\n                })\r\n            });\r\n        })\r\n    }\r\n\r\n    findUserByEmail(email, callback = () => {\r\n    }) {    \r\n        this.app.db.collection('users').findOne({email: email}, (err, result) => {\r\n            if (err || !result) {\r\n                return callback({message: \"User not found.\"})\r\n            }\r\n            return callback(null, result);\r\n        });\r\n    }\r\n\r\n    check(reqId, code) {\r\n       console.log(\"reqId and code in check method in user class : \" + reqId + \" \" + code);\r\n        return new Promise(function(resolve, reject) {\r\n            const nexmo = new Nexmo({\r\n                apiKey: '5ff68c1c',\r\n                apiSecret: '98M58gl906LXrf68'\r\n              });\r\n            nexmo.verify.check({\r\n              request_id: reqId,\r\n              code: code\r\n            }, (err, result) => {\r\n              if (err) {\r\n                console.error(err)\r\n                reject(err)\r\n              } else {\r\n                  console.log(\"successfully compared!\")\r\n                resolve(result)\r\n              }\r\n            })\r\n          })\r\n    }\r\n\r\n    verify(number) {\r\n        \r\n        return new Promise(function(resolve, reject) {\r\n            const nexmo = new Nexmo({\r\n                apiKey: '5ff68c1c',\r\n                apiSecret: '98M58gl906LXrf68'\r\n              });\r\n            nexmo.verify.request({\r\n              number: number,\r\n              brand: 'Vonage'\r\n            }, (err, result) => {\r\n              if (err) {\r\n                console.error(err)\r\n                reject(err)\r\n              } else {\r\n                  console.log(\"succesfully verified with reqId : \" + result.request_id)\r\n                resolve(result)\r\n              }\r\n            })\r\n          })\r\n    }\r\n\r\n    load(id) {\r\n        id = `${id}`;\r\n        return new Promise((resolve, reject) => {\r\n            // find in cache if found we return and dont nee to query db\r\n            const userInCache = this.users.get(id);\r\n            if (userInCache) {\r\n                return resolve(userInCache);\r\n            }\r\n            // if not found then we start query db\r\n            this.findUserById(id, (err, user) => {\r\n                if (!err && user) {\r\n                    this.users = this.users.set(id, user);\r\n                 }\r\n                return err ? reject(err) : resolve(user);\r\n            })\r\n        })\r\n    }\r\n\r\n    findUserById(id, callback = () => {\r\n    }) {\r\n        console.log(\"Begin query in database\");\r\n       if (!id) {\r\n            return callback({message: \"User not found\"}, null);\r\n        }\r\n        const userId = new ObjectID(id);\r\n        this.app.db.collection('users').findOne({_id: userId}, (err, result) => {\r\n            if (err || !result) {\r\n                return callback({message: \"User not found\"});\r\n            }\r\n            return callback(null, result);\r\n        });\r\n    }\r\n\r\n\r\n    beforeSave(user, callback  = () =>{}){\r\n        //fisr is validate user object before save to user collection\r\n        let errors = [];\r\n        const fields = ['role','name', 'email', 'password'];\r\n        const validations  = {\r\n            role: {\r\n                errorMessage: 'Choose your role!',\r\n                do: () => {\r\n                    const role = _.get(user, 'role', '');\r\n                    if (!role==\"student\" && !role==\"mentor\") {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            },\r\n            name: {\r\n                errorMessage: 'Name is required ',\r\n                do: () => {\r\n                    const name = _.get(user, 'name', '');\r\n                    return name.length;\r\n                }\r\n            },\r\n            email: {\r\n                errorMessage: 'Email is not correct ',\r\n                do: () => {\r\n                    const email = _.get(user, 'email', '');\r\n                    if (!email.length || !isEmail(email)) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            },\r\n            password: {\r\n                errorMessage: 'Password is required and more than 3 characters',\r\n                do: () => {\r\n                    const password = _.get(user, 'password', '');\r\n                    if (!password.length || password.length < 3) {\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n            \r\n         }\r\n\r\n            // loop all fields to check if valid or not.\r\n            fields.forEach((field) => {\r\n            const fieldValidation = _.get(validations, field);\r\n            if (fieldValidation) {\r\n                // do check/\r\n                const isValid = fieldValidation.do();\r\n                const msg = fieldValidation.errorMessage;\r\n                    if (!isValid) {\r\n                        errors.push(msg);\r\n                    }\r\n                }\r\n            });\r\n            if (errors.length) {\r\n                // this is not pass of the validation.\r\n                const err = _.join(errors, ',');\r\n                return callback(err, null);\r\n            }\r\n            // check email is exist in db or not\r\n            const email = _.toLower(_.trim(_.get(user, 'email', '')));\r\n                this.app.db.collection('users').findOne({email: email}, (err, result) => {\r\n                    if (err || result) {\r\n                            return callback({message: \"Email is already exist\"}, null);\r\n                        }\r\n                        // return callback with succes checked.\r\n                        const password = _.get(user, 'password');\r\n                        const hashPassword = bcrypt.hashSync(password, saltRound);\r\n                        const userFormatted = {\r\n                            role: _.get(user, 'role'),\r\n                            name: `${_.trim(_.get(user, 'name'))}`,\r\n                            email: email,\r\n                            password: hashPassword,\r\n                            created: new Date(),\r\n                        };    \r\n                        return callback(null, userFormatted);\r\n                });\r\n        }\r\n\r\n    create(user) {\r\n        const db = this.app.db;\r\n        console.log(\"User:\", user)\r\n        return new Promise((resolve, reject) => {\r\n            this.beforeSave(user, (err, user) =>{\r\n                console.log(\"After validation: \", err, user);\r\n                if(err){\r\n                    return reject(err);\r\n                }\r\n                //insert new user object to users collection\r\n                db.collection('users').insertOne(user, (err, info) => {\r\n                    //check if error return error to user\r\n                    if(err){\r\n                        return reject({message:'An error saving user'});\r\n                    }\r\n                    //otherwise, return user object to user.\r\n                    const userId = _.get(user, '_id').toString(); // this is OBJET ID\r\n                    this.users = this.users.set(userId, user);\r\n                    return resolve(user);\r\n                });\r\n            });\r\n        });\r\n    }\r\n}\r\n"]}