{"ast":null,"code":"import { OrderedMap } from 'immutable';\nimport _ from 'lodash';\nconst users = OrderedMap({\n  '1': {\n    _id: '1',\n    name: \"Julia Ly\",\n    created: new Date(),\n    avatar: 'https://api.adorable.io/avatars/100/abott@julia.png'\n  },\n  '2': {\n    _id: '2',\n    name: \"Gavin Ray\",\n    created: new Date(),\n    avatar: 'https://api.adorable.io/avatars/100/abott@gavin.png'\n  },\n  '3': {\n    _id: '3',\n    name: \"Darren Simpsons\",\n    created: new Date(),\n    avatar: 'https://api.adorable.io/avatars/100/abott@darren.png'\n  }\n});\nexport default class Store {\n  constructor(appComponent) {\n    this.app = appComponent;\n    this.messages = new OrderedMap();\n    this.channels = new OrderedMap();\n    this.activeChannelId = null; //this is current logged in user\n    // this.user = {\n    //     _id: 1,\n    //     name: \"Julia Ly\",\n    //     avatar:'https://api.adorable.io/avatars/100/abott@julia.png',\n    //     created: new Date(),\n    // }\n\n    this.user = {\n      _id: '1',\n      name: \"Julia Ly\",\n      created: new Date(),\n      avatar: 'https://api.adorable.io/avatars/100/abott@julia.png'\n    };\n  }\n\n  removeMemberFromChannel(channel = null, user = null) {\n    if (!channel || !user) {\n      return;\n    }\n\n    const userId = _.get(user, '_id');\n\n    const channelId = _.get(channel, '_id');\n\n    channel.members = channel.members.remove(userId);\n    this.channels = this.channels.set(channelId, channel);\n    this.update();\n  }\n\n  addUserToChannel(channelId, userId) {\n    const channel = this.channels.get(channelId);\n\n    if (channel) {\n      // now add this member id to channels members.\n      channel.members = channel.members.set(userId, true);\n      this.channels = this.channels.set(channelId, channel);\n      this.update();\n    }\n  }\n\n  searchUsers(search = \"\") {\n    const keyword = _.toLower(search);\n\n    let searchItems = new OrderedMap();\n    const currentUser = this.getCurrentUser();\n\n    const currentUserId = _.get(currentUser, '_id');\n\n    if (_.trim(search).length) {\n      searchItems = users.filter(user => _.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\n    }\n\n    return searchItems.valueSeq();\n  }\n\n  onCreateNewChannel(channel = {}) {\n    const channelId = _.get(channel, '_id');\n\n    this.addChannel(channelId, channel);\n    this.setActiveChannelId(channelId); // console.log(JSON.stringify(this.channels.toJS()));\n  }\n\n  getCurrentUser() {\n    return this.user;\n  }\n\n  setActiveChannelId(id) {\n    this.activeChannelId = id;\n    this.update();\n  }\n\n  getActiveChannel() {\n    const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\n    return channel;\n  }\n\n  addMessage(id, message = {}) {\n    //we need to add user object who is author of this message\n    const user = this.getCurrentUser();\n    message.user = user;\n    this.messages = this.messages.set(id, message); //let;s add new message id to current channel --> messages\n\n    const channelId = _.get(message, 'channelId');\n\n    if (channelId) {\n      let channel = this.channels.get(channelId);\n      channel.isNew = false;\n      channel.lastMessage = _.get(message, 'body', '');\n      channel.messages = channel.messages.set(id, true);\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update(); //console.log(JSON.stringify(this.messages.toJS()));\n  }\n\n  getMessages() {\n    return this.messages.valueSeq();\n  }\n\n  getMessagesFromChannel(channel) {\n    let messages = [];\n\n    if (channel) {\n      channel.messages.map((value, key) => {\n        // console.log(\"hi--0-\", value, key);\n        // console.log(typeof key);\n        const message = this.messages.get(key); // console.log(\"debyg\", message);\n\n        messages.push(message);\n      });\n    }\n\n    return messages;\n  }\n\n  getMembersFromChannel(channel) {\n    let members = new OrderedMap();\n\n    if (channel) {\n      channel.members.map((value, key) => {\n        const user = users.get(key);\n        const loggedUser = this.getCurrentUser();\n\n        if (_.get(loggedUser, '_id') !== _.get(user, '_id')) {\n          members = members.set(key, user);\n        }\n      });\n    }\n\n    return members.valueSeq();\n  }\n\n  addChannel(index, channel = {}) {\n    this.channels = this.channels.set(`${index}`, channel);\n    this.update();\n  }\n\n  getChannels() {\n    // return this.channels.valueSeq();\n    // we need to sort channel by date , the last one will list on top.\n    this.channels = this.channels.sort((a, b) => a.created < b.created);\n    return this.channels.valueSeq();\n  }\n\n  update() {\n    this.app.forceUpdate();\n  }\n\n}","map":{"version":3,"sources":["/Users/youngshinmin/Desktop/software-project/app/src/store.js"],"names":["OrderedMap","_","users","_id","name","created","Date","avatar","Store","constructor","appComponent","app","messages","channels","activeChannelId","user","removeMemberFromChannel","channel","userId","get","channelId","members","remove","set","update","addUserToChannel","searchUsers","search","keyword","toLower","searchItems","currentUser","getCurrentUser","currentUserId","trim","length","filter","includes","valueSeq","onCreateNewChannel","addChannel","setActiveChannelId","id","getActiveChannel","first","addMessage","message","isNew","lastMessage","getMessages","getMessagesFromChannel","map","value","key","push","getMembersFromChannel","loggedUser","index","getChannels","sort","a","b","forceUpdate"],"mappings":"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","sourcesContent":["import {OrderedMap} from 'immutable'\nimport _ from 'lodash'\n\nconst users = OrderedMap({\n    '1': {_id: '1', name:\"Julia Ly\", created: new Date(),avatar:'https://api.adorable.io/avatars/100/abott@julia.png'},\n    '2': {_id: '2', name:\"Gavin Ray\", created: new Date(), avatar:'https://api.adorable.io/avatars/100/abott@gavin.png'},\n    '3': {_id: '3', name:\"Darren Simpsons\", created: new Date(), avatar:'https://api.adorable.io/avatars/100/abott@darren.png'},\n})\n\nexport default class Store {\n    constructor(appComponent) {\n\n        this.app=appComponent;\n        this.messages = new OrderedMap();\n        this.channels = new OrderedMap();\n        this.activeChannelId = null;\n\n        //this is current logged in user\n        // this.user = {\n        //     _id: 1,\n        //     name: \"Julia Ly\",\n        //     avatar:'https://api.adorable.io/avatars/100/abott@julia.png',\n        //     created: new Date(),\n        // }\n        this.user = {\n            _id: '1',\n           name:\"Julia Ly\",\n            created: new Date(),\n            avatar:'https://api.adorable.io/avatars/100/abott@julia.png'\n        }\n\n    }\n\n    removeMemberFromChannel(channel = null, user = null) {\n\n        if (!channel || !user) {\n            return;\n        }\n\n        const userId = _.get(user, '_id');\n        const channelId = _.get(channel, '_id');\n\n        channel.members = channel.members.remove(userId);\n\n        this.channels = this.channels.set(channelId, channel);\n\n        this.update();\n\n    }\n\n\n    addUserToChannel(channelId, userId) {\n\n        \n        const channel = this.channels.get(channelId);\n    \n        if (channel) {\n    \n            // now add this member id to channels members.\n            channel.members = channel.members.set(userId, true);\n            this.channels = this.channels.set(channelId, channel);\n            this.update();\n            }\n    \n        }\n    \n\n\n    searchUsers(search = \"\"){\n\n        const keyword = _.toLower(search);\n        let searchItems = new OrderedMap();\n        const currentUser = this.getCurrentUser();\n        const currentUserId = _.get(currentUser, '_id');\n\n        if(_.trim(search).length) {\n\n            searchItems = users.filter((user) => _.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\n\n        }\n        return searchItems.valueSeq();\n\n    }\n\n    onCreateNewChannel(channel = {}) {\n\n        const channelId = _.get(channel, '_id');\n        this.addChannel(channelId, channel);\n        this.setActiveChannelId(channelId);\n\n  // console.log(JSON.stringify(this.channels.toJS()));\n\n    }\n\n\n\n    getCurrentUser(){\n\n        return this.user;\n\n    }\n    setActiveChannelId(id){\n\n        this.activeChannelId=id;\n        this.update();\n    }\n\n    getActiveChannel(){\n        const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();  \n        return channel;    \n    }\n\n\n    addMessage(id, message = {}){\n\n        //we need to add user object who is author of this message\n\n        const user = this.getCurrentUser();\n        message.user = user;\n\n        this.messages = this.messages.set(id, message);\n\n        //let;s add new message id to current channel --> messages\n\n        const channelId = _.get(message,'channelId');\n        if(channelId){\n\n            let channel = this.channels.get(channelId);\n\n            channel.isNew = false;\n            channel.lastMessage = _.get(message, 'body', '');\n\n            channel.messages = channel.messages.set(id, true);\n            this.channels = this.channels.set(channelId, channel);\n\n        }\n        this.update();\n        //console.log(JSON.stringify(this.messages.toJS()));\n    }\n    getMessages() {\n\n        return this.messages.valueSeq();\n    }\n\n    getMessagesFromChannel(channel) {\n        \n        let messages = [];\n\n        if(channel){\n            channel.messages.map((value, key) => {\n\n            // console.log(\"hi--0-\", value, key);\n            // console.log(typeof key);\n            const message =this.messages.get(key);\n            // console.log(\"debyg\", message);\n            messages.push(message);\n            });\n        }\n        return messages;\n    }\n\n    getMembersFromChannel(channel){\n\n    let members = new OrderedMap();\n\n    if(channel) {\n        channel.members.map((value, key) => {\n\n            const user = users.get(key);\n            \n            const loggedUser = this.getCurrentUser();\n\n            if(_.get(loggedUser, '_id') !== _.get(user, '_id')){\n            members = members.set(key, user);\n            }\n        });\n    }\n    return members.valueSeq();\n}\n\n    addChannel(index, channel = {}) {\n        this.channels = this.channels.set(`${index}`, channel);\n        this.update();\n    }\n   getChannels(){\n    // return this.channels.valueSeq();\n    // we need to sort channel by date , the last one will list on top.\n    this.channels = this.channels.sort((a, b) => a.created < b.created);\n\n    return this.channels.valueSeq();\n   }\n\n   update() {\n       this.app.forceUpdate();\n   }\n}"]},"metadata":{},"sourceType":"module"}