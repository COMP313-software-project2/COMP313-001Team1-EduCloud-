{"ast":null,"code":"import { OrderedMap } from 'immutable';\nimport _ from 'lodash';\nconst users = OrderedMap({\n  '1': {\n    _id: '1',\n    email: 'jl@gmail.com',\n    name: \"Julia Ly\",\n    created: new Date(),\n    avatar: 'https://api.adorable.io/avatars/100/abott@julia.png'\n  },\n  '2': {\n    _id: '2',\n    email: 'gr@gmail.com',\n    name: \"Gavin Ray\",\n    created: new Date(),\n    avatar: 'https://api.adorable.io/avatars/100/abott@gavin.png'\n  },\n  '3': {\n    _id: '3',\n    email: 'ds@gmail.com',\n    name: \"Darren Simpsons\",\n    created: new Date(),\n    avatar: 'https://api.adorable.io/avatars/100/abott@darren.png'\n  }\n});\nexport default class Store {\n  constructor(appComponent) {\n    this.app = appComponent;\n    this.messages = new OrderedMap();\n    this.channels = new OrderedMap();\n    this.activeChannelId = null;\n    this.user = this.getUserFromLocalStorage();\n    this.users = new OrderedMap();\n  }\n\n  getUserFromLocalStorage() {\n    let user = null;\n    const data = localStorage.getItem('me');\n\n    try {\n      user = JSON.parse(data);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  setCurrentUser(user) {\n    // set temporary user avatar image url\n    //user.avatar = this.loadUserAvatar(user);\n    this.user = user;\n\n    if (user) {\n      localStorage.setItem('me', JSON.stringify(user)); // save this user to our users collections in local \n      //const userId = `${user._id}`;\n      //this.users = this.users.set(userId, user);\n    }\n\n    this.update();\n  }\n\n  login(email = null, password = null) {\n    const userEmail = _.toLower(email);\n\n    const _this = this;\n\n    return new Promise((resolve, reject) => {\n      const user = users.find(user => user.email == userEmail);\n\n      if (user) {\n        _this.setCurrentUser(user);\n      }\n\n      return user ? resolve(user) : reject(\"User not found\");\n    });\n  }\n\n  removeMemberFromChannel(channel = null, user = null) {\n    if (!channel || !user) {\n      return;\n    }\n\n    const userId = _.get(user, '_id');\n\n    const channelId = _.get(channel, '_id');\n\n    channel.members = channel.members.remove(userId);\n    this.channels = this.channels.set(channelId, channel);\n    this.update();\n  }\n\n  addUserToChannel(channelId, userId) {\n    const channel = this.channels.get(channelId);\n\n    if (channel) {\n      // now add this member id to channels members.\n      channel.members = channel.members.set(userId, true);\n      this.channels = this.channels.set(channelId, channel);\n      this.update();\n    }\n  }\n\n  searchUsers(search = \"\") {\n    const keyword = _.toLower(search);\n\n    let searchItems = new OrderedMap();\n    const currentUser = this.getCurrentUser();\n\n    const currentUserId = _.get(currentUser, '_id');\n\n    if (_.trim(search).length) {\n      searchItems = users.filter(user => _.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\n    }\n\n    return searchItems.valueSeq();\n  }\n\n  onCreateNewChannel(channel = {}) {\n    const channelId = _.get(channel, '_id');\n\n    this.addChannel(channelId, channel);\n    this.setActiveChannelId(channelId); // console.log(JSON.stringify(this.channels.toJS()));\n  }\n\n  getCurrentUser() {\n    return this.user;\n  }\n\n  setActiveChannelId(id) {\n    this.activeChannelId = id;\n    this.update();\n  }\n\n  getActiveChannel() {\n    const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\n    return channel;\n  }\n\n  addMessage(id, message = {}) {\n    //we need to add user object who is author of this message\n    const user = this.getCurrentUser();\n    message.user = user;\n    this.messages = this.messages.set(id, message); //let;s add new message id to current channel --> messages\n\n    const channelId = _.get(message, 'channelId');\n\n    if (channelId) {\n      let channel = this.channels.get(channelId);\n      channel.isNew = false;\n      channel.lastMessage = _.get(message, 'body', '');\n      channel.messages = channel.messages.set(id, true);\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update(); //console.log(JSON.stringify(this.messages.toJS()));\n  }\n\n  getMessages() {\n    return this.messages.valueSeq();\n  }\n\n  getMessagesFromChannel(channel) {\n    let messages = new OrderedMap();\n\n    if (channel) {\n      channel.messages.forEach((value, key) => {\n        const message = this.messages.get(key);\n        messages = messages.set(key, message);\n      });\n    }\n\n    return messages.valueSeq();\n  }\n\n  getMembersFromChannel(channel) {\n    //         let members = new OrderedMap();\n    //         if (channel) {\n    //         channel.members.forEach((value, key) => {\n    //             //const userId = `${key}`;\n    //             const user = this.users.get(key);\n    //             const loggedUser = this.getCurrentUser();\n    //             if (_.get(loggedUser, '_id') !== _.get(user, '_id')) {\n    //                 members = members.set(key, user);\n    //             }\n    //         });\n    //     }\n    //     return members.valueSeq();\n    // }\n    let members = new OrderedMap();\n\n    if (channel) {\n      channel.members.forEach((value, key) => {\n        const userId = `${key}`;\n        const user = this.users.get(userId);\n        const loggedUser = this.getCurrentUser();\n\n        if (_.get(loggedUser, '_id') !== _.get(user, '_id')) {\n          members = members.set(key, user);\n        }\n      });\n    }\n\n    return members.valueSeq();\n  }\n\n  addChannel(index, channel = {}) {\n    this.channels = this.channels.set(`${index}`, channel);\n    this.update();\n  }\n\n  getChannels() {\n    // return this.channels.valueSeq();\n    // we need to sort channel by date , the last one will list on top.\n    this.channels = this.channels.sort((a, b) => a.created < b.created);\n    return this.channels.valueSeq();\n  }\n\n  update() {\n    this.app.forceUpdate();\n  }\n\n}","map":{"version":3,"sources":["/Users/youngshinmin/Desktop/software-project/app/src/store.js"],"names":["OrderedMap","_","users","_id","email","name","created","Date","avatar","Store","constructor","appComponent","app","messages","channels","activeChannelId","user","getUserFromLocalStorage","data","localStorage","getItem","JSON","parse","err","console","log","setCurrentUser","setItem","stringify","update","login","password","userEmail","toLower","_this","Promise","resolve","reject","find","removeMemberFromChannel","channel","userId","get","channelId","members","remove","set","addUserToChannel","searchUsers","search","keyword","searchItems","currentUser","getCurrentUser","currentUserId","trim","length","filter","includes","valueSeq","onCreateNewChannel","addChannel","setActiveChannelId","id","getActiveChannel","first","addMessage","message","isNew","lastMessage","getMessages","getMessagesFromChannel","forEach","value","key","getMembersFromChannel","loggedUser","index","getChannels","sort","a","b","forceUpdate"],"mappings":"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","sourcesContent":["import {OrderedMap} from 'immutable'\nimport _ from 'lodash'\n\nconst users = OrderedMap({\n    '1': {_id: '1', email:'jl@gmail.com',name:\"Julia Ly\", created: new Date(),avatar:'https://api.adorable.io/avatars/100/abott@julia.png'},\n    '2': {_id: '2',  email:'gr@gmail.com',name:\"Gavin Ray\", created: new Date(), avatar:'https://api.adorable.io/avatars/100/abott@gavin.png'},\n    '3': {_id: '3',  email:'ds@gmail.com',name:\"Darren Simpsons\", created: new Date(), avatar:'https://api.adorable.io/avatars/100/abott@darren.png'},\n})\n\nexport default class Store {\n    constructor(appComponent) {\n\n        this.app=appComponent;\n        this.messages = new OrderedMap();\n        this.channels = new OrderedMap();\n        this.activeChannelId = null;\n        \n\n       \n        this.user = this.getUserFromLocalStorage();\n        this.users = new OrderedMap();\n\n    }\n\n    getUserFromLocalStorage() {\n\n        let user = null;\n        const data = localStorage.getItem('me');\n        try {\n\n            user = JSON.parse(data);\n        }\n        catch (err) {\n\n            console.log(err);\n        }\n    }\n\n    setCurrentUser(user) {\n\n\n        // set temporary user avatar image url\n        //user.avatar = this.loadUserAvatar(user);\n        this.user = user;\n \n\n        if (user) {\n            localStorage.setItem('me', JSON.stringify(user));\n\n            // save this user to our users collections in local \n            //const userId = `${user._id}`;\n            //this.users = this.users.set(userId, user);\n        }\n\n        this.update();\n\n    }\n\n\n    login(email = null, password = null) {\n\n        const userEmail = _.toLower(email);\n        const _this =this;\n\n        return new Promise((resolve, reject) => {\n            \n            const user = users.find((user) => user.email ==userEmail);\n            if(user) {\n            _this.setCurrentUser(user);\n            }\n            return user ? resolve(user) : reject(\"User not found\");\n        });\n      \n    }\n\n\n\n\n    removeMemberFromChannel(channel = null, user = null) {\n\n        if (!channel || !user) {\n            return;\n        }\n\n        const userId = _.get(user, '_id');\n        const channelId = _.get(channel, '_id');\n\n        channel.members = channel.members.remove(userId);\n\n        this.channels = this.channels.set(channelId, channel);\n        this.update();\n    }\n\n    addUserToChannel(channelId, userId) {\n\n        const channel = this.channels.get(channelId);\n    \n        if (channel) {\n    \n            // now add this member id to channels members.\n            channel.members = channel.members.set(userId, true);\n            this.channels = this.channels.set(channelId, channel);\n            this.update();\n            }\n    \n        }\n    \n    searchUsers(search = \"\"){\n\n        const keyword = _.toLower(search);\n\n        let searchItems = new OrderedMap();\n        const currentUser = this.getCurrentUser();\n        const currentUserId = _.get(currentUser, '_id');\n\n        if(_.trim(search).length) {\n\n            searchItems = users.filter((user) => _.get(user, '_id') !== currentUserId && _.includes(_.toLower(_.get(user, 'name')), keyword));\n\n        }\n        return searchItems.valueSeq();\n\n    }\n\n    onCreateNewChannel(channel = {}) {\n\n        const channelId = _.get(channel, '_id');\n        this.addChannel(channelId, channel);\n        this.setActiveChannelId(channelId);\n\n  // console.log(JSON.stringify(this.channels.toJS()));\n\n    }\n\n\n\n    getCurrentUser(){\n\n        return this.user;\n\n    }\n    setActiveChannelId(id){\n\n        this.activeChannelId=id;\n        this.update();\n    }\n\n    getActiveChannel(){\n        const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();  \n        return channel;    \n    }\n\n\n    addMessage(id, message = {}){\n\n        //we need to add user object who is author of this message\n\n        const user = this.getCurrentUser();\n        message.user = user;\n\n        this.messages = this.messages.set(id, message);\n\n        //let;s add new message id to current channel --> messages\n\n        const channelId = _.get(message,'channelId');\n        if(channelId){\n\n            let channel = this.channels.get(channelId);\n\n            channel.isNew = false;\n            channel.lastMessage = _.get(message, 'body', '');\n\n            channel.messages = channel.messages.set(id, true);\n            this.channels = this.channels.set(channelId, channel);\n\n        }\n        this.update();\n        //console.log(JSON.stringify(this.messages.toJS()));\n    }\n    getMessages() {\n\n        return this.messages.valueSeq();\n    }\n\n    getMessagesFromChannel(channel) {\n        \n        let messages = new OrderedMap();\n\n        if(channel){\n\n            channel.messages.forEach((value, key) => {\n\n\n                const message = this.messages.get(key);\n\n                messages = messages.set(key, message);\n\n            });\n        }\n        return messages.valueSeq();\n    }\n\n    getMembersFromChannel(channel) {\n\n//         let members = new OrderedMap();\n\n//         if (channel) {\n\n//         channel.members.forEach((value, key) => {\n\n\n//             //const userId = `${key}`;\n//             const user = this.users.get(key);\n\n//             const loggedUser = this.getCurrentUser();\n\n//             if (_.get(loggedUser, '_id') !== _.get(user, '_id')) {\n//                 members = members.set(key, user);\n//             }\n\n\n//         });\n//     }\n//     return members.valueSeq();\n// }\n\nlet members = new OrderedMap();\n\nif (channel) {\n\n\n    channel.members.forEach((value, key) => {\n\n\n        const userId = `${key}`;\n        const user = this.users.get(userId);\n\n        const loggedUser = this.getCurrentUser();\n\n        if (_.get(loggedUser, '_id') !== _.get(user, '_id')) {\n            members = members.set(key, user);\n        }\n\n\n    });\n}\n\nreturn members.valueSeq();\n}\n\n    addChannel(index, channel = {}) {\n        this.channels = this.channels.set(`${index}`, channel);\n        this.update();\n    }\n   getChannels(){\n    // return this.channels.valueSeq();\n    // we need to sort channel by date , the last one will list on top.\n    this.channels = this.channels.sort((a, b) => a.created < b.created);\n\n    return this.channels.valueSeq();\n   }\n\n   update() {\n       this.app.forceUpdate();\n   }\n}"]},"metadata":{},"sourceType":"module"}