{"ast":null,"code":"var _jsxFileName = \"/Users/youngshinmin/Desktop/software-project/app/src/components/messenger.js\";\nimport React, { Component } from 'react';\nimport '../css/app.css';\nimport classNames from 'classnames';\nimport _ from 'lodash';\nimport { OrderedMap } from 'immutable';\nimport { ObjectID } from '../helpers/objectid.js';\nimport SearchUser from './search-user';\nimport moment from 'moment';\nimport UserBar from './user-bar';\nexport default class Messenger extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: window.innerHeight,\n      newMessage: 'Hello there...',\n      searchUser: \"\",\n      showSearchUser: false\n    };\n    this._onResize = this._onResize.bind(this);\n    this.handleSend = this.handleSend.bind(this);\n    this.renderMessage = this.renderMessage.bind(this);\n    this.scrollMessagesToBottom = this.scrollMessagesToBottom.bind(this);\n    this._onCreateChannel = this._onCreateChannel.bind(this);\n    this.renderChannelTitle = this.renderChannelTitle.bind(this);\n  }\n\n  renderChannelTitle(channel = {}) {\n    if (!channel) {\n      return null;\n    }\n\n    const {\n      store\n    } = this.props;\n    const members = store.getMembersFromChannel(channel);\n    const names = []; // members.forEach((user) => {\n    //     const name = _.get(user, 'name');\n    //     names.push(name);\n    // })\n\n    let title = _.join(names, ',');\n\n    if (!title && _.get(channel, 'isNew')) {\n      title = 'New Message';\n    }\n\n    return React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, title);\n  }\n\n  _onCreateChannel() {\n    const {\n      store\n    } = this.props;\n    const currentUser = store.getCurrentUser();\n\n    const currentUserId = _.get(currentUser, '_id');\n\n    const channelId = new ObjectID().toString();\n    const channel = {\n      _id: channelId,\n      title: '',\n      lastMessage: \"\",\n      members: new OrderedMap(),\n      messages: new OrderedMap(),\n      isNew: true,\n      userId: currentUserId,\n      created: new Date()\n    };\n    channel.members = channel.members.set(currentUserId, true);\n    store.onCreateNewChannel(channel);\n  }\n\n  scrollMessagesToBottom() {\n    if (this.messagesRef) {\n      this.messagesRef.scrollTop = this.messagesRef.scrollHeight;\n    }\n  }\n\n  renderMessage(message) {\n    const text = _.get(message, 'body', '');\n\n    const html = _.split(text, '\\n').map((m, key) => {\n      return React.createElement(\"p\", {\n        key: key,\n        dangerouslySetInnerHTML: {\n          __html: m\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      });\n    });\n\n    return html;\n  }\n\n  handleSend() {\n    const {\n      newMessage\n    } = this.state;\n    const {\n      store\n    } = this.props; //create new message\n\n    if (_.trim(newMessage).length) {\n      const messageId = new ObjectID().toString();\n      const channel = store.getActiveChannel();\n\n      const channelId = _.get(channel, '_id', null);\n\n      const currentUser = store.getCurrentUser();\n      const message = {\n        _id: messageId,\n        channelId: channelId,\n        body: newMessage,\n        // auth: _.get(currentUser, 'name', null),\n        userId: _.get(currentUser, '_id'),\n        me: true\n      };\n      store.addMessage(messageId, message);\n      this.setState({\n        newMessage: ''\n      });\n    }\n  }\n\n  _onResize() {\n    this.setState({\n      height: window.innerHeight\n    });\n  }\n\n  componentDidUpdate() {\n    this.scrollMessagesToBottom();\n  }\n\n  componentDidMount() {\n    console.log(\"Component did mount\");\n    window.addEventListener('resize', this._onResize);\n  }\n\n  componentWillUnmount() {\n    console.log(\"Component unmount\");\n    window.removeEventListener('resize', this._onResize);\n  }\n\n  render() {\n    const {\n      store\n    } = this.props;\n    const {\n      height\n    } = this.state;\n    const style = {\n      height: height\n    };\n    const activeChannel = store.getActiveChannel();\n    const messages = store.getMessagesFromChannel(activeChannel);\n    const channels = store.getChannels();\n    const members = store.getMembersFromChannel(activeChannel);\n    return React.createElement(\"div\", {\n      style: style,\n      className: \"app-messenger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"left-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"icon-paperplane\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: this._onCreateChannel,\n      className: \"right-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"icon-edit-modify-streamline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    })), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Messenger\")), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, _.get(activeChannel, 'isNew') ? React.createElement(\"div\", {\n      className: \"toolbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"To:\"), members.map((user, key) => {\n      return React.createElement(\"span\", {\n        onClick: () => {\n          //console.log(\"you want to remove user: \", user);\n          store.removeMemberFromChannel(activeChannel, user);\n        },\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, _.get(user, 'name'));\n    }), React.createElement(\"input\", {\n      placeholder: \"Type name of person...\",\n      onChange: event => {\n        const searchUserText = _.get(event, 'target.value');\n\n        this.setState({\n          searchUser: searchUserText,\n          showSearchUser: true\n        });\n      },\n      type: \"text\",\n      value: this.state.searchUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }), this.state.showSearchUser ? React.createElement(SearchUser, {\n      onSelect: user => {\n        this.setState({\n          showSearchUser: false,\n          searchUser: ''\n        }, () => {\n          const userId = _.get(user, '_id');\n\n          const channelId = _.get(activeChannel, '_id');\n\n          store.addUserToChannel(channelId, userId);\n        });\n      },\n      search: this.state.searchUser,\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }) : null) : this.renderChannelTitle(activeChannel)), React.createElement(\"div\", {\n      className: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(UserBar, {\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidebar-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"channels\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, channels.map((channel, key) => {\n      return React.createElement(\"div\", {\n        onClick: key => {\n          store.setActiveChannelId(channel._id);\n          console.log(\"Channel Id is selected\", channel._id);\n        },\n        key: channel._id,\n        className: classNames('channel', {\n          'active': _.get(activeChannel, '_id') === _.get(channel, '_id', null)\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"user-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"channel-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, this.renderChannelTitle(channel), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, channel.lastMessage)));\n    }))), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: ref => this.messagesRef = ref,\n      className: \"messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, messages.map((message, index) => {\n      const user = _.get(message, 'user');\n\n      return React.createElement(\"div\", {\n        key: index,\n        className: classNames('message', {\n          'me': message.me\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"message-user-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: _.get(user, 'avatar'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"message-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"message-author\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }, message.me ? 'You ' : _.get(user, 'name'), \" says:\"), React.createElement(\"div\", {\n        className: \"message-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, this.renderMessage(message)))));\n    })), activeChannel && members.size > 0 ? React.createElement(\"div\", {\n      className: \"messenger-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      onKeyUp: event => {\n        if (event.key === 'Enter' && !event.shiftKey) {\n          this.handleSend();\n        }\n      },\n      onChange: event => {\n        //console.log(\"Text is changing: \", event.target.value);\n        this.setState({\n          newMessage: _.get(event, 'target.value')\n        });\n      },\n      value: this.state.newMessage,\n      placeholder: \"Write your message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.handleSend,\n      className: \"send\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, \"Send\"))) : null), React.createElement(\"div\", {\n      className: \"sidebar-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, members.size > 0 ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, \"Members\"), React.createElement(\"div\", {\n      className: \"members\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, members.map((member, key) => {\n      return React.createElement(\"div\", {\n        className: \"member\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"user-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: _.get(member, 'avatar'),\n        alt: \"...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"member-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 334\n        },\n        __self: this\n      }, member.name), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335\n        },\n        __self: this\n      }, \"Joined:\", moment(member.created).fromNow().toString())));\n    }))) : null)));\n  }\n\n}","map":{"version":3,"sources":["/Users/youngshinmin/Desktop/software-project/app/src/components/messenger.js"],"names":["React","Component","classNames","_","OrderedMap","ObjectID","SearchUser","moment","UserBar","Messenger","constructor","props","state","height","window","innerHeight","newMessage","searchUser","showSearchUser","_onResize","bind","handleSend","renderMessage","scrollMessagesToBottom","_onCreateChannel","renderChannelTitle","channel","store","members","getMembersFromChannel","names","title","join","get","currentUser","getCurrentUser","currentUserId","channelId","toString","_id","lastMessage","messages","isNew","userId","created","Date","set","onCreateNewChannel","messagesRef","scrollTop","scrollHeight","message","text","html","split","map","m","key","__html","trim","length","messageId","getActiveChannel","body","me","addMessage","setState","componentDidUpdate","componentDidMount","console","log","addEventListener","componentWillUnmount","removeEventListener","render","style","activeChannel","getMessagesFromChannel","channels","getChannels","user","removeMemberFromChannel","event","searchUserText","addUserToChannel","setActiveChannelId","ref","index","size","shiftKey","member","name","fromNow"],"mappings":"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","sourcesContent":["import React, {Component} from'react'\nimport '../css/app.css'\nimport classNames from 'classnames'\nimport _ from 'lodash'\nimport {OrderedMap} from 'immutable'\nimport {ObjectID} from '../helpers/objectid.js'\nimport SearchUser from './search-user'\nimport moment from 'moment'\nimport UserBar from './user-bar'\n\nexport default class Messenger extends Component{\n\n    constructor(props) {\n\n        super(props);\n\n        this.state={\n            height:window.innerHeight,\n            newMessage: 'Hello there...',\n            searchUser:\"\",\n            showSearchUser: false,\n         \n        }\n\n        this._onResize = this._onResize.bind(this);\n        this.handleSend = this.handleSend.bind(this);\n        this.renderMessage = this.renderMessage.bind(this);\n        this.scrollMessagesToBottom = this.scrollMessagesToBottom.bind(this);\n        this._onCreateChannel = this._onCreateChannel.bind(this);\n        this.renderChannelTitle = this.renderChannelTitle.bind(this);\n    }\n\n    renderChannelTitle(channel = {}){\n\n        if(!channel){\n            return null;\n        }\n\n        const {store} = this.props;\n\n        const members = store.getMembersFromChannel(channel);\n \n\n        const names=[];\n\n        // members.forEach((user) => {\n\n        //     const name = _.get(user, 'name');\n        //     names.push(name);\n        // })\n\n        let title = _.join(names, ',');\n        if(!title && _.get(channel,'isNew')){\n            title = 'New Message';\n        }\n        return <h2>{title}</h2>\n    };\n\n    _onCreateChannel(){\n        const {store} =  this.props;\n\n        const currentUser = store.getCurrentUser();\n        const currentUserId = _.get(currentUser, '_id');\n\n        const channelId = new ObjectID().toString();\n        const channel = {\n            _id: channelId,\n            title: '',\n            lastMessage: \"\",\n            members: new OrderedMap(),\n            messages: new OrderedMap(),\n            isNew: true,\n            userId: currentUserId,\n            created: new Date(),\n        };\n\n        channel.members = channel.members.set(currentUserId, true);\n\n        store.onCreateNewChannel(channel);\n\n        \n    }\n\n    scrollMessagesToBottom() {\n\n        if (this.messagesRef) {\n\n            this.messagesRef.scrollTop = this.messagesRef.scrollHeight;\n        }\n    }\n\n\n    renderMessage(message){\n\n        const text = _.get(message, 'body', '');\n        const html = _.split(text, '\\n').map((m, key) => {\n\n            return <p key={key} dangerouslySetInnerHTML={{__html: m}}/>\n           \n\n        })\n\n        return html\n    }\n\n\n    handleSend() {\n        const {newMessage} = this.state;\n        const {store} = this.props;\n\n        //create new message\n        if(_.trim(newMessage).length) {\n            const messageId =  new ObjectID().toString();\n            const channel = store.getActiveChannel();\n            const channelId =_.get(channel, '_id', null);\n            const currentUser = store.getCurrentUser();\n\n            const message = {\n                _id: messageId,\n                channelId: channelId,\n                body: newMessage,\n               // auth: _.get(currentUser, 'name', null),\n                userId: _.get(currentUser, '_id'),\n                me: true,\n            };\n\n            \n            store.addMessage(messageId, message);\n\n            this.setState({\n                newMessage: '',\n            })\n        }\n        \n    \n        \n\n    }\n    _onResize() {\n\n        this.setState({\n            height: window.innerHeight\n        });\n    }\n    componentDidUpdate() {\n\n       \n        this.scrollMessagesToBottom();\n    }\n\n    \n        componentDidMount() {\n\n            console.log(\"Component did mount\");\n            window.addEventListener('resize', this._onResize);\n       \n        }\n\n        componentWillUnmount() {\n    \n          console.log(\"Component unmount\");\n          window.removeEventListener('resize', this._onResize)\n    \n        }\n    \n    \n\nrender(){\n\n    const {store} = this.props;\n    const {height}=this.state;\n\n    const style = {\n        height: height,\n    };\n\n    const activeChannel = store.getActiveChannel();\n    const messages = store.getMessagesFromChannel(activeChannel);\n    const channels = store.getChannels();\n    const members = store.getMembersFromChannel(activeChannel);\n\n    return (\n     <div style={style} className=\"app-messenger\">\n                <div className=\"header\">\n                    <div className=\"left\">\n                        <button className=\"left-action\"><i className=\"icon-paperplane\"/></button>\n                        <button onClick={this._onCreateChannel} className=\"right-action\"><i className=\"icon-edit-modify-streamline\"/></button>\n                        <h2>Messenger</h2>\n                      \n                    </div>    \n                    <div className=\"content\">\n                    {_.get(activeChannel, 'isNew') ? <div className=\"toolbar\">\n                            <label>To:</label>\n                                {\n                                    members.map((user, key)=>{\n                                        return <span onClick={() =>{\n                                                //console.log(\"you want to remove user: \", user);\n\n                                                store.removeMemberFromChannel(activeChannel, user);\n\n                                    }}\n                                        key = {key}>{_.get(user, 'name')}</span>\n                                    })\n                                 }\n                            <input placeholder=\"Type name of person...\" onChange={(event)=>{\n                                const searchUserText = _.get(event, 'target.value');\n                            \n\n                                this.setState({\n                                    searchUser: searchUserText,\n                                    showSearchUser: true,\n                                });   \n\n                            }}\n                            type=\"text\" value={this.state.searchUser}></input>\n\n                                {this.state.showSearchUser ? <SearchUser \n                                    onSelect={(user) => {\n                                       \n                                    \n                                        this.setState({\n                                            showSearchUser: false,\n                                            searchUser:'',\n\n\n                                        }, () => {\n                                            \n                                            const userId = _.get(user, '_id');\n                                            const channelId = _.get(activeChannel, '_id');\n\n                                            store.addUserToChannel(channelId, userId);\n                                        });\n                                    }}\n\n                                     search={this.state.searchUser} store={store}/> : null \n                                     }\n                        \n                        </div> : this.renderChannelTitle(activeChannel)}\n\n                    \n                        </div>\n                    <div className=\"right\">\n                        <UserBar store = {store}/>\n                    </div>\n                </div>\n                <div className=\"main\">\n                        <div className=\"sidebar-left\">\n                            <div className=\"channels\">\n\n                                {channels.map((channel, key) => {\n                                    return (\n                                        <div onClick={(key) => {\n                                           \n                                                store.setActiveChannelId(channel._id);\n                                                console.log(\"Channel Id is selected\", channel._id);\n\n                                            }} key={channel._id} className={classNames('channel', {'active' : _.get(activeChannel, '_id') === _.get(channel,'_id', null) } )}>\n                                            <div className=\"user-image\">\n                                            </div>\n                                    <div className=\"channel-info\">\n                                        {this.renderChannelTitle(channel)}\n                                        <p>{channel.lastMessage}</p>\n                                    </div>\n                                </div>\n\n                                    )\n                                })}\n\n                 \n                            </div>\n\n                        </div>\n                        <div className=\"content\">\n                            <div ref={(ref) => this.messagesRef = ref} className=\"messages\">\n\n                                {messages.map((message, index) => {\n\n                                    const user = _.get(message,'user');\n\n                                return (\n                                    <div key={index} className={classNames('message', {'me': message.me})}>\n                                    <div className=\"message-user-image\">\n                                        <img src = {_.get(user, 'avatar')}></img>\n                                    </div>\n                                    <div className=\"message-body\">\n                                    <div className=\"message-author\">{message.me ? 'You ' : _.get(user, 'name')} says:</div>\n                                    <div className=\"message-text\">\n                                        <p>\n                                            {this.renderMessage(message)}\n                                        </p>\n                                    </div>\n\n                                    </div>\n                                </div>\n                                )\n                            })}\n\n                            </div>\n\n                            {activeChannel && members.size > 0 ? <div className=\"messenger-input\">\n                               <div className=\"text-input\">\n                                    <textarea onKeyUp = {(event) => {\n\n                                        if(event.key ==='Enter' && !event.shiftKey){\n                                        this.handleSend();\n                                        }\n                                    }}\n                                    onChange={(event) => {\n                                        //console.log(\"Text is changing: \", event.target.value);\n                                        this.setState({newMessage: _.get(event, 'target.value')});\n\n                                        }} value={this.state.newMessage} placeholder =\"Write your message\" />\n                                    </div>\n                                    <div className=\"actions\">\n                                        <button onClick={this.handleSend} className=\"send\">Send</button>\n                                    </div> \n                               </div> : null }\n\n                               </div>\n                        <div className=\"sidebar-right\">\n\n                            { members.size > 0 ? <div>\n                            <h2 className=\"title\">Members</h2>\n                            <div className=\"members\">\n                            {members.map((member, key) => {\n                                \n                                    return (\n                                        \n                                    <div className=\"member\">\n                                        <div className=\"user-image\">\n                                            <img src={_.get(member,'avatar')} alt=\"...\"></img>\n                                        </div>\n                                        <div className=\"member-info\">\n                                            <h2>{member.name}</h2>\n                                            <p>Joined:{moment(member.created).fromNow().toString()}</p>\n                                        </div>\n                                    </div>\n                                    )\n                                })}\n                               \n                                </div></div> :  null}\n\n                            </div>\n\n\n\n                        </div>\n                </div>\n            \n                \n        )      \n}\n}\n"]},"metadata":{},"sourceType":"module"}