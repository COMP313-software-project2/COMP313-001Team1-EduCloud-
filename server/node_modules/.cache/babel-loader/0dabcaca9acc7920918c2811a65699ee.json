{"ast":null,"code":"import { OrderedMap } from 'immutable';\nimport _ from 'lodash';\nconst users = OrderedMap({\n  '1': {\n    _id: '1',\n    name: \"Julia Ly\",\n    created: new Date(),\n    avatar: 'https://api.adorable.io/avatars/100/abott@julia.png'\n  },\n  '2': {\n    _id: '2',\n    name: \"Gavin Ray\",\n    created: new Date(),\n    avatar: 'https://api.adorable.io/avatars/100/abott@gavin.png'\n  },\n  '3': {\n    _id: '3',\n    name: \"Darren Simpsons\",\n    created: new Date(),\n    avatar: 'https://api.adorable.io/avatars/100/abott@darren.png'\n  }\n});\nexport default class Store {\n  constructor(appComponent) {\n    this.app = appComponent;\n    this.messages = new OrderedMap();\n    this.channels = new OrderedMap();\n    this.activeChannelId = null;\n    this.user = {\n      _id: 0,\n      name: \"Julia\",\n      created: new Date()\n    };\n  }\n\n  searchUsers(search = \"\") {\n    let searchItems = new OrderedMap();\n\n    if (_.trim(search).length) {\n      //do search in our users list\n      users.filter(user => {\n        const name = _.get(user, 'name');\n\n        const userId = _.get(user, '_id');\n\n        if (_.includes(name, search)) {\n          searchItems = searchItems.set(userId, user);\n        }\n      });\n    }\n\n    return searchItems.valueSeq();\n  }\n\n  onCreateNewChannel(channel = {}) {\n    const channelId = _.get(channel, '_id');\n\n    this.addChannel(channelId, channel);\n    this.setActiveChannelId(channelId); //console.log(JSON.stringify(this.channels.toJS()));\n  }\n\n  getCurrentUser() {\n    return this.user;\n  }\n\n  setActiveChannelId(id) {\n    this.activeChannelId = id;\n    this.update();\n  }\n\n  getActiveChannel() {\n    const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\n    return channel;\n  }\n\n  addMessage(id, message = {}) {\n    this.messages = this.messages.set(`${id}`, message); //let;s add new message id to current channel --> messages\n\n    const channelId = _.get(message, 'channelId');\n\n    if (channelId) {\n      const channel = this.channels.get(channelId);\n      channel.messages = channel.messages.set(id, true);\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update();\n  }\n\n  getMessages() {\n    return this.messages.valueSeq();\n  }\n\n  getMessagesFromChannel(channel) {\n    let messages = [];\n\n    if (channel) {\n      channel.messages.map((value, key) => {\n        // console.log(\"hi--0-\", value, key);\n        // console.log(typeof key);\n        const message = this.messages.get(key); // console.log(\"debyg\", message);\n\n        messages.push(message);\n      });\n    }\n\n    return messages;\n  }\n\n  getMembersFromChannel(channel) {\n    let members = new OrderedMap();\n\n    if (channel) {\n      channel.members.map((value, key) => {\n        const user = users.get(key);\n        members = members.set(key, user);\n      });\n    }\n\n    return members.valueSeq();\n  }\n\n  addChannel(index, channel = {}) {\n    this.channels = this.channels.set(`${index}`, channel);\n    this.update();\n  }\n\n  getChannels() {\n    // return this.channels.valueSeq();\n    // we need to sort channel by date , the last one will list on top.\n    this.channels = this.channels.sort((a, b) => a.created < b.created);\n    return this.channels.valueSeq();\n  }\n\n  update() {\n    this.app.forceUpdate();\n  }\n\n}","map":{"version":3,"sources":["/Users/youngshinmin/Desktop/software-project/app/src/store.js"],"names":["OrderedMap","_","users","_id","name","created","Date","avatar","Store","constructor","appComponent","app","messages","channels","activeChannelId","user","searchUsers","search","searchItems","trim","length","filter","get","userId","includes","set","valueSeq","onCreateNewChannel","channel","channelId","addChannel","setActiveChannelId","getCurrentUser","id","update","getActiveChannel","first","addMessage","message","getMessages","getMessagesFromChannel","map","value","key","push","getMembersFromChannel","members","index","getChannels","sort","a","b","forceUpdate"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,WAAzB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,MAAMC,KAAK,GAAGF,UAAU,CAAC;AACrB,OAAK;AAACG,IAAAA,GAAG,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAC,UAAhB;AAA4BC,IAAAA,OAAO,EAAE,IAAIC,IAAJ,EAArC;AAAgDC,IAAAA,MAAM,EAAC;AAAvD,GADgB;AAErB,OAAK;AAACJ,IAAAA,GAAG,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAC,WAAhB;AAA6BC,IAAAA,OAAO,EAAE,IAAIC,IAAJ,EAAtC;AAAkDC,IAAAA,MAAM,EAAC;AAAzD,GAFgB;AAGrB,OAAK;AAACJ,IAAAA,GAAG,EAAE,GAAN;AAAWC,IAAAA,IAAI,EAAC,iBAAhB;AAAmCC,IAAAA,OAAO,EAAE,IAAIC,IAAJ,EAA5C;AAAwDC,IAAAA,MAAM,EAAC;AAA/D;AAHgB,CAAD,CAAxB;AAMA,eAAe,MAAMC,KAAN,CAAY;AACvBC,EAAAA,WAAW,CAACC,YAAD,EAAe;AAEtB,SAAKC,GAAL,GAASD,YAAT;AACA,SAAKE,QAAL,GAAgB,IAAIZ,UAAJ,EAAhB;AACA,SAAKa,QAAL,GAAgB,IAAIb,UAAJ,EAAhB;AACA,SAAKc,eAAL,GAAuB,IAAvB;AACA,SAAKC,IAAL,GAAY;AACRZ,MAAAA,GAAG,EAAE,CADG;AAERC,MAAAA,IAAI,EAAE,OAFE;AAGRC,MAAAA,OAAO,EAAE,IAAIC,IAAJ;AAHD,KAAZ;AAKH;;AAEDU,EAAAA,WAAW,CAACC,MAAM,GAAG,EAAV,EAAa;AAEpB,QAAIC,WAAW,GAAG,IAAIlB,UAAJ,EAAlB;;AAEA,QAAGC,CAAC,CAACkB,IAAF,CAAOF,MAAP,EAAeG,MAAlB,EAA0B;AACtB;AACAlB,MAAAA,KAAK,CAACmB,MAAN,CAAcN,IAAD,IAAU;AAEnB,cAAMX,IAAI,GAAGH,CAAC,CAACqB,GAAF,CAAMP,IAAN,EAAW,MAAX,CAAb;;AACA,cAAMQ,MAAM,GAAGtB,CAAC,CAACqB,GAAF,CAAMP,IAAN,EAAY,KAAZ,CAAf;;AAEA,YAAGd,CAAC,CAACuB,QAAF,CAAWpB,IAAX,EAAiBa,MAAjB,CAAH,EAA4B;AAExBC,UAAAA,WAAW,GAAGA,WAAW,CAACO,GAAZ,CAAgBF,MAAhB,EAAwBR,IAAxB,CAAd;AACH;AAEJ,OAVD;AAWH;;AACD,WAAOG,WAAW,CAACQ,QAAZ,EAAP;AAEH;;AAEDC,EAAAA,kBAAkB,CAACC,OAAO,GAAG,EAAX,EAAe;AAE7B,UAAMC,SAAS,GAAG5B,CAAC,CAACqB,GAAF,CAAMM,OAAN,EAAe,KAAf,CAAlB;;AACA,SAAKE,UAAL,CAAgBD,SAAhB,EAA2BD,OAA3B;AACA,SAAKG,kBAAL,CAAwBF,SAAxB,EAJ6B,CAM7B;AAEH;;AAGDG,EAAAA,cAAc,GAAE;AAEZ,WAAO,KAAKjB,IAAZ;AAEH;;AAGDgB,EAAAA,kBAAkB,CAACE,EAAD,EAAI;AAClB,SAAKnB,eAAL,GAAqBmB,EAArB;AACA,SAAKC,MAAL;AACH;;AAGDC,EAAAA,gBAAgB,GAAE;AACd,UAAMP,OAAO,GAAG,KAAKd,eAAL,GAAuB,KAAKD,QAAL,CAAcS,GAAd,CAAkB,KAAKR,eAAvB,CAAvB,GAAiE,KAAKD,QAAL,CAAcuB,KAAd,EAAjF;AACA,WAAOR,OAAP;AACH;;AAEDS,EAAAA,UAAU,CAACJ,EAAD,EAAKK,OAAO,GAAG,EAAf,EAAkB;AACxB,SAAK1B,QAAL,GAAgB,KAAKA,QAAL,CAAca,GAAd,CAAmB,GAAEQ,EAAG,EAAxB,EAA2BK,OAA3B,CAAhB,CADwB,CAExB;;AACA,UAAMT,SAAS,GAAG5B,CAAC,CAACqB,GAAF,CAAMgB,OAAN,EAAc,WAAd,CAAlB;;AACA,QAAGT,SAAH,EAAa;AACT,YAAMD,OAAO,GAAG,KAAKf,QAAL,CAAcS,GAAd,CAAkBO,SAAlB,CAAhB;AAEAD,MAAAA,OAAO,CAAChB,QAAR,GAAmBgB,OAAO,CAAChB,QAAR,CAAiBa,GAAjB,CAAqBQ,EAArB,EAAyB,IAAzB,CAAnB;AACA,WAAKpB,QAAL,GAAgB,KAAKA,QAAL,CAAcY,GAAd,CAAkBI,SAAlB,EAA6BD,OAA7B,CAAhB;AAEH;;AACD,SAAKM,MAAL;AACH;;AACDK,EAAAA,WAAW,GAAG;AAEV,WAAO,KAAK3B,QAAL,CAAcc,QAAd,EAAP;AACH;;AAEDc,EAAAA,sBAAsB,CAACZ,OAAD,EAAU;AAE5B,QAAIhB,QAAQ,GAAG,EAAf;;AAEA,QAAGgB,OAAH,EAAW;AACPA,MAAAA,OAAO,CAAChB,QAAR,CAAiB6B,GAAjB,CAAqB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAErC;AACA;AACA,cAAML,OAAO,GAAE,KAAK1B,QAAL,CAAcU,GAAd,CAAkBqB,GAAlB,CAAf,CAJqC,CAKrC;;AACA/B,QAAAA,QAAQ,CAACgC,IAAT,CAAcN,OAAd;AACC,OAPD;AAQH;;AACD,WAAO1B,QAAP;AACH;;AAEDiC,EAAAA,qBAAqB,CAACjB,OAAD,EAAS;AAC9B,QAAIkB,OAAO,GAAG,IAAI9C,UAAJ,EAAd;;AAEA,QAAG4B,OAAH,EAAY;AACRA,MAAAA,OAAO,CAACkB,OAAR,CAAgBL,GAAhB,CAAoB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAGhC,cAAM5B,IAAI,GAAGb,KAAK,CAACoB,GAAN,CAAUqB,GAAV,CAAb;AAEAG,QAAAA,OAAO,GAAGA,OAAO,CAACrB,GAAR,CAAYkB,GAAZ,EAAiB5B,IAAjB,CAAV;AACH,OAND;AAOH;;AACD,WAAO+B,OAAO,CAACpB,QAAR,EAAP;AACH;;AAEGI,EAAAA,UAAU,CAACiB,KAAD,EAAQnB,OAAO,GAAG,EAAlB,EAAsB;AAC5B,SAAKf,QAAL,GAAgB,KAAKA,QAAL,CAAcY,GAAd,CAAmB,GAAEsB,KAAM,EAA3B,EAA8BnB,OAA9B,CAAhB;AACA,SAAKM,MAAL;AACH;;AACFc,EAAAA,WAAW,GAAE;AACZ;AACA;AACA,SAAKnC,QAAL,GAAgB,KAAKA,QAAL,CAAcoC,IAAd,CAAmB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC7C,OAAF,GAAY8C,CAAC,CAAC9C,OAA3C,CAAhB;AAEA,WAAO,KAAKQ,QAAL,CAAca,QAAd,EAAP;AACA;;AAEDQ,EAAAA,MAAM,GAAG;AACL,SAAKvB,GAAL,CAASyC,WAAT;AACH;;AAjIuB","sourcesContent":["import {OrderedMap} from 'immutable'\nimport _ from 'lodash'\n\nconst users = OrderedMap({\n    '1': {_id: '1', name:\"Julia Ly\", created: new Date(),avatar:'https://api.adorable.io/avatars/100/abott@julia.png'},\n    '2': {_id: '2', name:\"Gavin Ray\", created: new Date(), avatar:'https://api.adorable.io/avatars/100/abott@gavin.png'},\n    '3': {_id: '3', name:\"Darren Simpsons\", created: new Date(), avatar:'https://api.adorable.io/avatars/100/abott@darren.png'},\n})\n\nexport default class Store {\n    constructor(appComponent) {\n\n        this.app=appComponent;\n        this.messages = new OrderedMap();\n        this.channels = new OrderedMap();\n        this.activeChannelId = null;\n        this.user = {\n            _id: 0,\n            name: \"Julia\",\n            created: new Date(),\n        }\n    }\n\n    searchUsers(search = \"\"){\n\n        let searchItems = new OrderedMap(); \n\n        if(_.trim(search).length) {\n            //do search in our users list\n            users.filter((user) => {\n\n                const name = _.get(user,'name');\n                const userId = _.get(user, '_id');  \n\n                if(_.includes(name, search)){\n                    \n                    searchItems = searchItems.set(userId, user);\n                }    \n\n            })\n        }\n        return searchItems.valueSeq();\n\n    }\n\n    onCreateNewChannel(channel = {}) {\n\n        const channelId = _.get(channel, '_id');\n        this.addChannel(channelId, channel);\n        this.setActiveChannelId(channelId);\n\n        //console.log(JSON.stringify(this.channels.toJS()));\n\n    }\n\n\n    getCurrentUser(){\n\n        return this.user;\n\n    }\n\n\n    setActiveChannelId(id){\n        this.activeChannelId=id;\n        this.update();\n    }\n\n\n    getActiveChannel(){\n        const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();  \n        return channel;    \n    }\n\n    addMessage(id, message = {}){\n        this.messages = this.messages.set(`${id}`, message);\n        //let;s add new message id to current channel --> messages\n        const channelId = _.get(message,'channelId');\n        if(channelId){\n            const channel = this.channels.get(channelId);\n\n            channel.messages = channel.messages.set(id, true);\n            this.channels = this.channels.set(channelId, channel);\n\n        }\n        this.update();\n    }\n    getMessages() {\n\n        return this.messages.valueSeq();\n    }\n\n    getMessagesFromChannel(channel) {\n        \n        let messages = [];\n\n        if(channel){\n            channel.messages.map((value, key) => {\n\n            // console.log(\"hi--0-\", value, key);\n            // console.log(typeof key);\n            const message =this.messages.get(key);\n            // console.log(\"debyg\", message);\n            messages.push(message);\n            });\n        }\n        return messages;\n    }\n\n    getMembersFromChannel(channel){\n    let members = new OrderedMap();\n\n    if(channel) {\n        channel.members.map((value, key) => {\n           \n           \n            const user = users.get(key);\n            \n            members = members.set(key, user);\n        });\n    }\n    return members.valueSeq();\n}\n\n    addChannel(index, channel = {}) {\n        this.channels = this.channels.set(`${index}`, channel);\n        this.update();\n    }\n   getChannels(){\n    // return this.channels.valueSeq();\n    // we need to sort channel by date , the last one will list on top.\n    this.channels = this.channels.sort((a, b) => a.created < b.created);\n\n    return this.channels.valueSeq();\n   }\n\n   update() {\n       this.app.forceUpdate();\n   }\n}"]},"metadata":{},"sourceType":"module"}