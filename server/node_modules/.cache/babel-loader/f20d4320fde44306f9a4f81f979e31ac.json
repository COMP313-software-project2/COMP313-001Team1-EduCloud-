{"ast":null,"code":"var _jsxFileName = \"/Users/youngshinmin/Desktop/software-project/app/src/components/messenger.js\";\nimport React, { Component } from 'react';\nimport '../css/app.css';\nimport classNames from 'classnames';\nimport _ from 'lodash';\nimport { OrderedMap } from 'immutable';\nimport { ObjectID } from '../helpers/objectid.js';\nimport SearchUser from './search-user';\nimport moment from 'moment';\nexport default class Messenger extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      height: window.innerHeight,\n      newMessage: 'Hello there...',\n      searchUser: \"\",\n      showSearchUser: false\n    };\n    this._onResize = this._onResize.bind(this);\n    this.addTestMessages = this.addTestMessages.bind(this);\n    this.handleSend = this.handleSend.bind(this);\n    this.renderMessage = this.renderMessage.bind(this);\n    this.scrollMessagesToBottom = this.scrollMessagesToBottom.bind(this);\n    this._onCreateChannel = this._onCreateChannel.bind(this);\n    this.renderChannelTitle = this.renderChannelTitle.bind(this);\n  }\n\n  renderChannelTitle(channel = {}) {\n    const {\n      store\n    } = this.props;\n    const activeChannel = store.getActiveChannel();\n    const members = store.getMembersFromChannel(channel);\n    const names = [];\n    members.map(user => {\n      console.log(user);\n      names.push(_.get(user, 'name'));\n    });\n    console.log(names);\n    return React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, \"Hi there....\");\n  }\n\n  _onCreateChannel() {\n    const {\n      store\n    } = this.props; // const currentUser = store.getCurrentUser();\n    // const currentUserId = _.get(currentUser, '_id');\n\n    const channelId = new ObjectID().toString();\n    const channel = {\n      _id: channelId,\n      title: 'New Message',\n      lastMessage: \"\",\n      members: new OrderedMap(),\n      messages: new OrderedMap(),\n      isNew: true,\n      created: new Date()\n    }; //channel.members = channel.members.set(currentUserId, true);\n\n    store.onCreateNewChannel(channel);\n  }\n\n  scrollMessagesToBottom() {\n    if (this.messagesRef) {\n      this.messagesRef.scrollTop = this.messagesRef.scrollHeight;\n    }\n  }\n\n  renderMessage(message) {\n    const text = _.get(message, 'body', '');\n\n    const html = _.split(text, '\\n').map((m, key) => {\n      return React.createElement(\"p\", {\n        key: key,\n        dangerouslySetInnerHTML: {\n          __html: m\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      });\n    });\n\n    return html;\n  }\n\n  handleSend() {\n    const {\n      newMessage\n    } = this.state;\n    const {\n      store\n    } = this.props; //create new message\n\n    if (_.trim(newMessage).length) {\n      const messageId = new ObjectID().toString();\n      const channel = store.getActiveChannel();\n\n      const channelId = _.get(channel, '_id', null);\n\n      const currentUser = store.getCurrentUser();\n      const message = {\n        _id: messageId,\n        channelId: channelId,\n        body: newMessage,\n        auth: _.get(currentUser, 'name', null),\n        me: true\n      };\n      store.addMessage(messageId, message);\n      this.setState({\n        newMessage: ''\n      });\n    }\n  }\n\n  _onResize() {\n    this.setState({\n      height: window.innerHeight\n    });\n  }\n\n  componentDidUpdate() {\n    this.scrollMessagesToBottom();\n  }\n\n  componentDidMount() {\n    console.log(\"Component did mount\");\n    window.addEventListener('resize', this._onResize);\n    this.addTestMessages();\n  }\n\n  addTestMessages() {\n    const {\n      store\n    } = this.props; // const store =this.props.store;\n\n    for (let i = 0; i < 100; i++) {\n      let isMe = false;\n\n      if (i % 3 === 0) {\n        isMe = true;\n      }\n\n      const newMsg = {\n        _id: `${i}`,\n        body: `The body of message ${i}`,\n        author: `Author: ${i}`,\n        me: isMe\n      };\n      console.log(typeof i);\n      store.addMessage(i, newMsg); //i need upsate my componen and re-render it now because new messages added \n    } //create some test channels\n\n\n    for (let c = 0; c < 10; c++) {\n      let newChannel = {\n        _id: `${c}`,\n        title: `Channel title ${c}`,\n        lastMessage: `Hey there here...${c}`,\n        members: new OrderedMap({\n          '2': true,\n          '3': true,\n          '1': true\n        }),\n        messages: new OrderedMap(),\n        created: new Date()\n      };\n      const msgId = `${c}`;\n      const moreMsgId = `${c + 1}`;\n      newChannel.messages = newChannel.messages.set(msgId, true);\n      newChannel.messages = newChannel.messages.set(moreMsgId, true);\n      store.addChannel(c, newChannel);\n    }\n  }\n\n  componentWillUnmount() {\n    console.log(\"Component unmount\");\n    window.removeEventListener('resize', this._onResize);\n  }\n\n  render() {\n    const {\n      store\n    } = this.props;\n    const {\n      height\n    } = this.state;\n    const style = {\n      height: height\n    };\n    const activeChannel = store.getActiveChannel();\n    const messages = store.getMessagesFromChannel(activeChannel);\n    const channels = store.getChannels();\n    const members = store.getMembersFromChannel(activeChannel);\n    return React.createElement(\"div\", {\n      style: style,\n      className: \"app-messenger\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"left-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"icon-paperplane\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      onClick: this._onCreateChannel,\n      className: \"right-action\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      className: \"icon-edit-modify-streamline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    })), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, \"Messenger\")), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, _.get(activeChannel, 'isNew') ? React.createElement(\"div\", {\n      className: \"toolbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \"To\"), React.createElement(\"input\", {\n      placeholder: \"Type name of person...\",\n      onChange: event => {\n        const searchUserText = _.get(event, 'target.value');\n\n        {\n          /* console.log(\"searching for user with name: \",searchUserText)  */\n        }\n        this.setState({\n          searchUser: searchUserText,\n          showSearchUser: true\n        });\n      },\n      type: \"text\",\n      value: this.state.searchUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), this.state.showSearchUser ? React.createElement(SearchUser, {\n      onSelect: user => {\n        this.setState({\n          showSearchUser: false,\n          searchUser: ''\n        }, () => {\n          const userId = _.get(user, '_id');\n\n          const channelId = _.get(activeChannel, '_id');\n\n          store.addUserToChannel(channelId, userId);\n        });\n      },\n      search: this.state.searchUser,\n      store: store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }) : null) : React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, _.get(activeChannel, 'title', ''))), React.createElement(\"div\", {\n      className: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"user-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"profile-name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, \"James Ray\"), React.createElement(\"div\", {\n      className: \"profile-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidebar-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"channels\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, channels.map((channel, key) => {\n      return React.createElement(\"div\", {\n        onClick: key => {\n          //this._onSelectChannel(key)\n          store.setActiveChannelId(channel._id);\n          console.log(\"Channel Id is selected\", channel._id);\n        },\n        key: channel._id,\n        className: classNames('channel', {\n          'active': _.get(activeChannel, '_id') === _.get(channel, '_id', null)\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"user-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"channel-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }, this.renderChannelTitle(channel), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, channel.lastMessage)));\n    }))), React.createElement(\"div\", {\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: ref => this.messagesRef = ref,\n      className: \"messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, messages.map((message, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        className: classNames('message', {\n          'me': message.me\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"message-user-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"message-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"message-author\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, message.me ? 'You ' : message.author, \" says:\"), React.createElement(\"div\", {\n        className: \"message-text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      }, this.renderMessage(message)))));\n    })), React.createElement(\"div\", {\n      className: \"messenger-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(\"textarea\", {\n      onKeyUp: event => {\n        if (event.key === 'Enter' && !event.shiftKey) {\n          this.handleSend();\n        }\n      },\n      onChange: event => {\n        //console.log(\"Text is changing: \", event.target.value);\n        this.setState({\n          newMessage: _.get(event, 'target.value')\n        });\n      },\n      value: this.state.newMessage,\n      placeholder: \"Write your message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"actions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.handleSend,\n      className: \"send\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \"Send\")))), React.createElement(\"div\", {\n      className: \"sidebar-right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, members.size > 0 ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347\n      },\n      __self: this\n    }, \"Members\"), React.createElement(\"div\", {\n      className: \"members\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, members.map((member, key) => {\n      return React.createElement(\"div\", {\n        className: \"member\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"user-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: _.get(member, 'avatar'),\n        alt: \"...\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"member-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 357\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }, member.name), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }, \"Joined:\", moment(member.created).fromNow().toString())));\n    }))) : null)));\n  }\n\n}","map":{"version":3,"sources":["/Users/youngshinmin/Desktop/software-project/app/src/components/messenger.js"],"names":["React","Component","classNames","_","OrderedMap","ObjectID","SearchUser","moment","Messenger","constructor","props","state","height","window","innerHeight","newMessage","searchUser","showSearchUser","_onResize","bind","addTestMessages","handleSend","renderMessage","scrollMessagesToBottom","_onCreateChannel","renderChannelTitle","channel","store","activeChannel","getActiveChannel","members","getMembersFromChannel","names","map","user","console","log","push","get","channelId","toString","_id","title","lastMessage","messages","isNew","created","Date","onCreateNewChannel","messagesRef","scrollTop","scrollHeight","message","text","html","split","m","key","__html","trim","length","messageId","currentUser","getCurrentUser","body","auth","me","addMessage","setState","componentDidUpdate","componentDidMount","addEventListener","i","isMe","newMsg","author","c","newChannel","msgId","moreMsgId","set","addChannel","componentWillUnmount","removeEventListener","render","style","getMessagesFromChannel","channels","getChannels","event","searchUserText","userId","addUserToChannel","setActiveChannelId","ref","index","shiftKey","size","member","name","fromNow"],"mappings":"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","sourcesContent":["import React, {Component} from'react'\nimport '../css/app.css'\nimport classNames from 'classnames'\nimport _ from 'lodash'\nimport {OrderedMap} from 'immutable'\nimport {ObjectID} from '../helpers/objectid.js'\nimport SearchUser from './search-user'\nimport moment from 'moment'\n\nexport default class Messenger extends Component{\n\n    constructor(props) {\n\n        super(props);\n\n        this.state={\n            height:window.innerHeight,\n            newMessage: 'Hello there...',\n            searchUser:\"\",\n            showSearchUser: false,\n         \n        }\n\n        this._onResize = this._onResize.bind(this);\n        this.addTestMessages = this.addTestMessages.bind(this);\n        this.handleSend = this.handleSend.bind(this);\n        this.renderMessage = this.renderMessage.bind(this);\n        this.scrollMessagesToBottom = this.scrollMessagesToBottom.bind(this);\n        this._onCreateChannel = this._onCreateChannel.bind(this);\n        this.renderChannelTitle = this.renderChannelTitle.bind(this);\n    }\n\n    renderChannelTitle(channel = {}){\n        const {store} = this.props;\n\n        const activeChannel =  store.getActiveChannel();\n        const members = store.getMembersFromChannel(channel);\n\n        const names=[];\n\n        members.map((user) => {\n\n            console.log(user);\n            names.push(_.get(user, 'name'));\n        });\n        console.log(names);\n\n        return <h2>Hi there....</h2>\n    };\n\n    _onCreateChannel(){\n        const {store} =  this.props;\n\n        // const currentUser = store.getCurrentUser();\n        // const currentUserId = _.get(currentUser, '_id');\n\n        const channelId = new ObjectID().toString();\n        const channel = {\n            _id: channelId,\n            title: 'New Message',\n            lastMessage: \"\",\n            members: new OrderedMap(),\n            messages: new OrderedMap(),\n            isNew: true,\n            created: new Date(),\n        };\n\n        //channel.members = channel.members.set(currentUserId, true);\n\n        store.onCreateNewChannel(channel);\n\n        \n    }\n\n    scrollMessagesToBottom() {\n\n        if (this.messagesRef) {\n\n            this.messagesRef.scrollTop = this.messagesRef.scrollHeight;\n        }\n    }\n\n\n    renderMessage(message){\n\n        const text = _.get(message, 'body', '');\n        const html = _.split(text, '\\n').map((m, key) => {\n\n            return <p key={key} dangerouslySetInnerHTML={{__html: m}}/>\n           \n\n        })\n\n        return html\n    }\n\n\n    handleSend() {\n        const {newMessage} = this.state;\n        const {store} = this.props;\n\n        //create new message\n        if(_.trim(newMessage).length) {\n            const messageId =  new ObjectID().toString();\n            const channel = store.getActiveChannel();\n            const channelId =_.get(channel, '_id', null);\n            const currentUser = store.getCurrentUser();\n\n            const message = {\n                _id: messageId,\n                channelId: channelId,\n                body: newMessage,\n                auth: _.get(currentUser, 'name', null),\n                me: true,\n            };\n\n            \n            store.addMessage(messageId, message);\n\n            this.setState({\n                newMessage: '',\n            })\n        }\n        \n    \n        \n\n    }\n    _onResize() {\n\n        this.setState({\n            height: window.innerHeight\n        });\n    }\n    componentDidUpdate() {\n\n       \n        this.scrollMessagesToBottom();\n    }\n\n    \n        componentDidMount() {\n\n            console.log(\"Component did mount\");\n            window.addEventListener('resize', this._onResize);\n            this.addTestMessages();\n        }\n\n        addTestMessages(){\n           \n            const {store}  = this.props;\n\n            // const store =this.props.store;\n\n            for(let i = 0; i < 100; i ++) {\n                let isMe = false;\n\n            if(i % 3 === 0) {\n                isMe= true\n            }\n                const newMsg = {\n                    _id: `${i}`,\n                    body: `The body of message ${i}`,\n                    author: `Author: ${i}`,\n                    me: isMe\n                }\n                console.log(typeof i);\n                store.addMessage(i, newMsg);\n                //i need upsate my componen and re-render it now because new messages added \n            }\n\n                   //create some test channels\n                   for(let c = 0; c < 10; c++) {\n                    let newChannel = {\n                        _id: `${c}`,\n                        title: `Channel title ${c}`,\n                        lastMessage:`Hey there here...${c}`,\n                        members: new OrderedMap({\n                            '2':true,\n                            '3':true,\n                            '1':true,\n                        }),\n                        messages: new OrderedMap(),\n                        created: new Date(),\n                    }\n                    const msgId = `${c}`;\n                    const moreMsgId = `${c + 1}`\n                    newChannel.messages = newChannel.messages.set(msgId, true);\n                    newChannel.messages = newChannel.messages.set(moreMsgId, true);\n                    store.addChannel(c, newChannel);\n                }\n\n        }\n\n        componentWillUnmount() {\n    \n          console.log(\"Component unmount\");\n          window.removeEventListener('resize', this._onResize)\n    \n        }\n    \n    \n\nrender(){\n\n    const {store} = this.props;\n    const {height}=this.state;\n\n    const style = {\n        height: height,\n    };\n\n    const activeChannel = store.getActiveChannel();\n    const messages = store.getMessagesFromChannel(activeChannel);\n    const channels = store.getChannels();\n    const members = store.getMembersFromChannel(activeChannel);\n\n    return (\n     <div style={style} className=\"app-messenger\">\n                <div className=\"header\">\n                    <div className=\"left\">\n                        <button className=\"left-action\"><i className=\"icon-paperplane\"/></button>\n                        <button onClick={this._onCreateChannel} className=\"right-action\"><i className=\"icon-edit-modify-streamline\"/></button>\n                        <h2>Messenger</h2>\n                      \n                    </div>    \n                    <div className=\"content\">\n                    {_.get(activeChannel, 'isNew') ? <div className=\"toolbar\">\n                            <label>To</label>\n                            <input placeholder=\"Type name of person...\" onChange={(event)=>{\n                                const searchUserText = _.get(event, 'target.value');\n                                \n                                {/* console.log(\"searching for user with name: \",searchUserText)  */}\n\n                                this.setState({\n                                    searchUser: searchUserText,\n                                    showSearchUser: true,\n                                });   \n\n                            }}\n                            type=\"text\" value={this.state.searchUser}></input>\n\n                                {this.state.showSearchUser ? <SearchUser \n                                    onSelect={(user) => {\n                                       \n                                    \n                                        this.setState({\n                                            showSearchUser: false,\n                                            searchUser:'',\n\n\n                                        }, () => {\n                                            \n                                            const userId = _.get(user, '_id');\n                                            const channelId = _.get(activeChannel, '_id');\n\n                                            store.addUserToChannel(channelId, userId);\n                                        });\n                                    }}\n\n                                     search={this.state.searchUser} store={store}/> : null }\n                        \n                        </div> : <h2>{_.get(activeChannel, 'title', '')}</h2>\n\n                    }\n                        </div>\n                    <div className=\"right\">\n                        <div className=\"user-bar\">\n                            <div className=\"profile-name\">James Ray</div>\n                            <div className=\"profile-image\"></div>\n                    </div>\n                    </div>\n                </div>\n                <div className=\"main\">\n                        <div className=\"sidebar-left\">\n                            <div className=\"channels\">\n\n                                {channels.map((channel, key) => {\n                                    return (\n                                        <div onClick={(key) => {\n                                            //this._onSelectChannel(key)\n                                                store.setActiveChannelId(channel._id);\n                                                console.log(\"Channel Id is selected\", channel._id);\n\n                                            }} key={channel._id} className={classNames('channel', {'active' : _.get(activeChannel, '_id') === _.get(channel,'_id', null) } )}>\n                                            <div className=\"user-image\">\n                                            </div>\n                                    <div className=\"channel-info\">\n                                        {this.renderChannelTitle(channel)}\n                                        <p>{channel.lastMessage}</p>\n                                    </div>\n                                </div>\n\n                                    )\n                                })}\n\n                 \n                            </div>\n\n                        </div>\n                        <div className=\"content\">\n                            <div ref={(ref) => this.messagesRef = ref} className=\"messages\">\n\n                                {messages.map((message, index) => {\n\n                                return (\n                                    <div key={index} className={classNames('message', {'me': message.me})}>\n                                    <div className=\"message-user-image\">\n                                        \n                                    </div>\n                                    <div className=\"message-body\">\n                                    <div className=\"message-author\">{message.me ? 'You ' : message.author} says:</div>\n                                    <div className=\"message-text\">\n                                        <p>\n                                            {this.renderMessage(message)}\n                                        </p>\n                                    </div>\n\n                                    </div>\n                                </div>\n                                )\n                            })}\n\n                            </div>\n                           <div className=\"messenger-input\">\n                               <div className=\"text-input\">\n                                    <textarea onKeyUp = {(event) => {\n\n                                        if(event.key ==='Enter' && !event.shiftKey){\n                                        this.handleSend();}\n                                        }\n                                        }\n                                    onChange={(event) => {\n                                        //console.log(\"Text is changing: \", event.target.value);\n                                        this.setState({newMessage: _.get(event, 'target.value')});\n\n                                        }} value={this.state.newMessage} placeholder =\"Write your message\" />\n                               </div>\n                               <div className=\"actions\">\n                                   <button onClick={this.handleSend} className=\"send\">Send</button>\n                               </div>\n                               </div>\n                               </div>\n                        <div className=\"sidebar-right\">\n\n                            { members.size > 0 ? <div>\n                            <h2 className=\"title\">Members</h2>\n                            <div className=\"members\">\n                            {members.map((member, key) => {\n                                \n                                    return (\n                                        \n                                    <div className=\"member\">\n                                        <div className=\"user-image\">\n                                            <img src={_.get(member,'avatar')} alt=\"...\"></img>\n                                        </div>\n                                        <div className=\"member-info\">\n                                            <h2>{member.name}</h2>\n                                            <p>Joined:{moment(member.created).fromNow().toString()}</p>\n                                        </div>\n                                    </div>\n                                    )\n                                })}\n                               \n                                </div></div> :  null}\n\n                            </div>\n\n\n\n                        </div>\n                </div>\n            \n                \n        )      \n}\n}\n"]},"metadata":{},"sourceType":"module"}