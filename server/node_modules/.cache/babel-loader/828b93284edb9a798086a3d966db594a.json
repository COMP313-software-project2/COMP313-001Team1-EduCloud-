{"ast":null,"code":"import { OrderedMap } from 'immutable';\nimport _ from 'lodash';\nconst users = OrderedMap({\n  '1': {\n    _id: '1',\n    name: \"Julia Ly\",\n    created: new Date(),\n    avatar: 'https://api.adorable.io/avatars/100/abott@julia.png'\n  },\n  '2': {\n    _id: '2',\n    name: \"Gavin Ray\",\n    created: new Date(),\n    avatar: 'https://api.adorable.io/avatars/100/abott@gavin.png'\n  },\n  '3': {\n    _id: '3',\n    name: \"Darren Simpsons\",\n    created: new Date(),\n    avatar: 'https://api.adorable.io/avatars/100/abott@darren.png'\n  }\n});\nexport default class Store {\n  constructor(appComponent) {\n    this.app = appComponent;\n    this.messages = new OrderedMap();\n    this.channels = new OrderedMap();\n    this.activeChannelId = null;\n    this.user = {\n      _id: 0,\n      name: \"Julia\",\n      created: new Date()\n    };\n  }\n\n  addUserToChannel(channelId, userId) {\n    console.log(\"Adding new user to channel\", channelId, userId); // const channel = this.channels.get(channelId);\n    // if (channel) {\n    //     // now add this member id to channels members.\n    //     channel.members = channel.members.set(userId, true);\n    //     this.channels = this.channels.set(channelId, channel);\n    //     this.update();\n    //     }\n  }\n\n  searchUsers(search = \"\") {\n    let searchItems = new OrderedMap();\n\n    if (_.trim(search).length) {\n      //do search in our users list\n      users.filter(user => {\n        const name = _.get(user, 'name');\n\n        const userId = _.get(user, '_id');\n\n        if (_.includes(name, search)) {\n          searchItems = searchItems.set(userId, user);\n        }\n      });\n    }\n\n    return searchItems.valueSeq();\n  }\n\n  onCreateNewChannel(channel = {}) {\n    const channelId = _.get(channel, '_id');\n\n    this.addChannel(channelId, channel);\n    this.setActiveChannelId(channelId); //console.log(JSON.stringify(this.channels.toJS()));\n  }\n\n  getCurrentUser() {\n    return this.user;\n  }\n\n  setActiveChannelId(id) {\n    this.activeChannelId = id;\n    this.update();\n  }\n\n  getActiveChannel() {\n    const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();\n    return channel;\n  }\n\n  addMessage(id, message = {}) {\n    this.messages = this.messages.set(`${id}`, message); //let;s add new message id to current channel --> messages\n\n    const channelId = _.get(message, 'channelId');\n\n    if (channelId) {\n      const channel = this.channels.get(channelId);\n      channel.messages = channel.messages.set(id, true);\n      this.channels = this.channels.set(channelId, channel);\n    }\n\n    this.update();\n  }\n\n  getMessages() {\n    return this.messages.valueSeq();\n  }\n\n  getMessagesFromChannel(channel) {\n    let messages = [];\n\n    if (channel) {\n      channel.messages.map((value, key) => {\n        // console.log(\"hi--0-\", value, key);\n        // console.log(typeof key);\n        const message = this.messages.get(key); // console.log(\"debyg\", message);\n\n        messages.push(message);\n      });\n    }\n\n    return messages;\n  }\n\n  getMembersFromChannel(channel) {\n    let members = new OrderedMap();\n\n    if (channel) {\n      channel.members.map((value, key) => {\n        console.log(key, value);\n        const user = users.get(key);\n        console.log(\"user is\", user);\n        members = members.set(key, user);\n      });\n    }\n\n    return members.valueSeq();\n  }\n\n  addChannel(index, channel = {}) {\n    this.channels = this.channels.set(`${index}`, channel);\n    this.update();\n  }\n\n  getChannels() {\n    // return this.channels.valueSeq();\n    // we need to sort channel by date , the last one will list on top.\n    this.channels = this.channels.sort((a, b) => a.created < b.created);\n    return this.channels.valueSeq();\n  }\n\n  update() {\n    this.app.forceUpdate();\n  }\n\n}","map":{"version":3,"sources":["/Users/youngshinmin/Desktop/software-project/app/src/store.js"],"names":["OrderedMap","_","users","_id","name","created","Date","avatar","Store","constructor","appComponent","app","messages","channels","activeChannelId","user","addUserToChannel","channelId","userId","console","log","searchUsers","search","searchItems","trim","length","filter","get","includes","set","valueSeq","onCreateNewChannel","channel","addChannel","setActiveChannelId","getCurrentUser","id","update","getActiveChannel","first","addMessage","message","getMessages","getMessagesFromChannel","map","value","key","push","getMembersFromChannel","members","index","getChannels","sort","a","b","forceUpdate"],"mappings":"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","sourcesContent":["import {OrderedMap} from 'immutable'\nimport _ from 'lodash'\n\nconst users = OrderedMap({\n    '1': {_id: '1', name:\"Julia Ly\", created: new Date(),avatar:'https://api.adorable.io/avatars/100/abott@julia.png'},\n    '2': {_id: '2', name:\"Gavin Ray\", created: new Date(), avatar:'https://api.adorable.io/avatars/100/abott@gavin.png'},\n    '3': {_id: '3', name:\"Darren Simpsons\", created: new Date(), avatar:'https://api.adorable.io/avatars/100/abott@darren.png'},\n})\n\nexport default class Store {\n    constructor(appComponent) {\n\n        this.app=appComponent;\n        this.messages = new OrderedMap();\n        this.channels = new OrderedMap();\n        this.activeChannelId = null;\n        this.user = {\n            _id: 0,\n            name: \"Julia\",\n            created: new Date(),\n        }\n    }\n\n    addUserToChannel(channelId, userId) {\n\n        console.log(\"Adding new user to channel\", channelId, userId);\n        // const channel = this.channels.get(channelId);\n    \n        // if (channel) {\n    \n        //     // now add this member id to channels members.\n        //     channel.members = channel.members.set(userId, true);\n        //     this.channels = this.channels.set(channelId, channel);\n        //     this.update();\n        //     }\n    \n        }\n    \n\n\n    searchUsers(search = \"\"){\n\n        let searchItems = new OrderedMap(); \n\n        if(_.trim(search).length) {\n            //do search in our users list\n            users.filter((user) => {\n\n                const name = _.get(user,'name');\n                const userId = _.get(user, '_id');  \n\n                if(_.includes(name, search)){\n                    \n                    searchItems = searchItems.set(userId, user);\n                }    \n\n            })\n        }\n        return searchItems.valueSeq();\n\n    }\n\n    onCreateNewChannel(channel = {}) {\n\n        const channelId = _.get(channel, '_id');\n        this.addChannel(channelId, channel);\n        this.setActiveChannelId(channelId);\n\n        //console.log(JSON.stringify(this.channels.toJS()));\n\n    }\n\n\n    getCurrentUser(){\n\n        return this.user;\n\n    }\n\n\n    setActiveChannelId(id){\n        this.activeChannelId=id;\n        this.update();\n    }\n\n\n    getActiveChannel(){\n        const channel = this.activeChannelId ? this.channels.get(this.activeChannelId) : this.channels.first();  \n        return channel;    \n    }\n\n    addMessage(id, message = {}){\n        this.messages = this.messages.set(`${id}`, message);\n        //let;s add new message id to current channel --> messages\n        const channelId = _.get(message,'channelId');\n        if(channelId){\n            const channel = this.channels.get(channelId);\n\n            channel.messages = channel.messages.set(id, true);\n            this.channels = this.channels.set(channelId, channel);\n\n        }\n        this.update();\n    }\n    getMessages() {\n\n        return this.messages.valueSeq();\n    }\n\n    getMessagesFromChannel(channel) {\n        \n        let messages = [];\n\n        if(channel){\n            channel.messages.map((value, key) => {\n\n            // console.log(\"hi--0-\", value, key);\n            // console.log(typeof key);\n            const message =this.messages.get(key);\n            // console.log(\"debyg\", message);\n            messages.push(message);\n            });\n        }\n        return messages;\n    }\n\n    getMembersFromChannel(channel){\n\n    let members = new OrderedMap();\n\n    if(channel) {\n        channel.members.map((value, key) => {\n        console.log(key, value);\n\n            const user = users.get(key);\n            console.log(\"user is\", user);\n            members = members.set(key, user);\n        });\n    }\n    return members.valueSeq();\n}\n\n    addChannel(index, channel = {}) {\n        this.channels = this.channels.set(`${index}`, channel);\n        this.update();\n    }\n   getChannels(){\n    // return this.channels.valueSeq();\n    // we need to sort channel by date , the last one will list on top.\n    this.channels = this.channels.sort((a, b) => a.created < b.created);\n\n    return this.channels.valueSeq();\n   }\n\n   update() {\n       this.app.forceUpdate();\n   }\n}"]},"metadata":{},"sourceType":"module"}